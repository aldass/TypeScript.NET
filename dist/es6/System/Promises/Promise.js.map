{"version":3,"sources":["System/Promises/Promise.ts"],"names":[],"mappings":"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","file":"Promise.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n * Although most of the following code is written from scratch, it is\r\n * heavily influenced by Q (https://github.com/kriskowal/q) and uses some of Q's spec.\r\n */\r\n/*\r\n * Resources:\r\n * https://promisesaplus.com/\r\n * https://github.com/kriskowal/q\r\n */\r\n\r\nimport Type from \"../Types\";\r\nimport {deferImmediate} from \"../Threading/deferImmediate\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {ObjectPool} from \"../Disposable/ObjectPool\";\r\nimport {Set} from \"../Collections/Set\";\r\nimport {defer} from \"../Threading/defer\";\r\nimport {ObjectDisposedException} from \"../Disposable/ObjectDisposedException\";\r\nimport __extendsImport from \"../../extends\";\r\nimport {Closure} from \"../FunctionTypes\";\r\n//noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0, NULL:any = null, PROMISE = \"Promise\", PROMISE_STATE = PROMISE + \"State\",\r\n      THEN                                                                    = \"then\", TARGET                                                   = \"target\";\r\n\r\nfunction isPromise<T>(value:any):value is PromiseLike<T>\r\n{\r\n\treturn Type.hasMemberOfType(value, THEN, Type.FUNCTION);\r\n}\r\n\r\nfunction resolve<T>(\r\n\tvalue:TSDNPromise.Resolution<T>, resolver:(v:TSDNPromise.Resolution<T>) => any,\r\n\tpromiseFactory:(v:any) => PromiseBase<any>):PromiseBase<any>\r\n{\r\n\tlet nextValue = resolver\r\n\t\t? resolver(value)\r\n\t\t: value;\r\n\r\n\treturn nextValue && isPromise(nextValue)\r\n\t\t? TSDNPromise.wrap(nextValue)\r\n\t\t: promiseFactory(nextValue);\r\n}\r\n\r\nfunction handleResolution(\r\n\tp:TSDNPromise<any> | null | undefined,\r\n\tvalue:TSDNPromise.Resolution<any>,\r\n\tresolver?:(v:TSDNPromise.Resolution<any>) => any):any\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(p)\r\n\t\t{ //noinspection JSIgnoredPromiseFromCall\r\n\t\t\tp.resolve(v);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tcatch(ex)\r\n\t{\r\n\t\tif(p)\r\n\t\t{ //noinspection JSIgnoredPromiseFromCall\r\n\t\t\tp.reject(ex);\r\n\t\t}\r\n\t\treturn ex;\r\n\t}\r\n}\r\n\r\nexport type Resolver = (v:TSDNPromise.Resolution<any>) => any;\r\n\r\nfunction handleResolutionMethods(\r\n\ttargetFulfill:TSDNPromise.Fulfill<any, any> | null | undefined,\r\n\ttargetReject:TSDNPromise.Reject<any> | null | undefined,\r\n\tvalue:TSDNPromise.Resolution<any>,\r\n\tresolver?:Resolver | null | undefined ):void\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(targetFulfill) targetFulfill(v);\r\n\t}\r\n\tcatch(ex)\r\n\t{ if(targetReject) targetReject(ex); }\r\n}\r\n\r\nfunction handleDispatch<T, TFulfilled = T, TRejected = never>(\r\n\tp:PromiseLike<T>,\r\n\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled>,\r\n\tonRejected?:TSDNPromise.Reject<TRejected>):void\r\n{\r\n\tif(p instanceof PromiseBase)\r\n\t{\r\n\t\tp.doneNow(onFulfilled, onRejected);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tp.then(<any>onFulfilled, onRejected);\r\n\t}\r\n}\r\n\r\nfunction handleSyncIfPossible<T, TFulfilled = T, TRejected = never>(\r\n\tp:PromiseLike<T>,\r\n\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled>,\r\n\tonRejected?:TSDNPromise.Reject<TRejected>):PromiseLike<TFulfilled | TRejected>\r\n{\r\n\tif(p instanceof PromiseBase)\r\n\t\treturn p.thenSynchronous(onFulfilled, onRejected);\r\n\telse\r\n\t\treturn p.then(onFulfilled, onRejected);\r\n}\r\n\r\nfunction newODE()\r\n{\r\n\treturn new ObjectDisposedException(\"TSDNPromise\", \"An underlying promise-result was disposed.\");\r\n}\r\n\r\nexport class PromiseState<T>\r\n\textends DisposableBase\r\n{\r\n\r\n\tconstructor(\r\n\t\tprotected _state:TSDNPromise.State,\r\n\t\tprotected _result?:T,\r\n\t\tprotected _error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = PROMISE_STATE;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis._state = VOID0;\r\n\t\tthis._result = VOID0;\r\n\t\tthis._error = VOID0;\r\n\t}\r\n\r\n\tprotected getState():TSDNPromise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget state():TSDNPromise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget isPending():boolean\r\n\t{\r\n\t\treturn this.getState()===TSDNPromise.State.Pending;\r\n\t}\r\n\r\n\tget isSettled():boolean\r\n\t{\r\n\t\treturn this.getState()!=TSDNPromise.State.Pending; // Will also include undefined==0 aka disposed!=resolved.\r\n\t}\r\n\r\n\tget isFulfilled():boolean\r\n\t{\r\n\t\treturn this.getState()===TSDNPromise.State.Fulfilled;\r\n\t}\r\n\r\n\tget isRejected():boolean\r\n\t{\r\n\t\treturn this.getState()===TSDNPromise.State.Rejected;\r\n\t}\r\n\r\n\t/*\r\n\t * Providing overrides allows for special defer or lazy sub classes.\r\n\t */\r\n\tprotected getResult():T | undefined\r\n\t{\r\n\t\treturn this._result;\r\n\t}\r\n\r\n\tget result():T | undefined\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tprotected getError():any\r\n\t{\r\n\t\treturn this._error;\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getError();\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class PromiseBase<T>\r\n\textends PromiseState<T>\r\n\timplements PromiseLike<T>, Promise<T>\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(TSDNPromise.State.Pending);\r\n\t\tthis._disposableObjectName = PROMISE;\r\n\t}\r\n\r\n\t/**\r\n\t * .doneNow is provided as a non-standard means that synchronously resolves as the end of a promise chain.\r\n\t * As stated by promisejs.org: 'then' is to 'done' as 'map' is to 'forEach'.\r\n\t * It is the underlying method by which propagation occurs.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract doneNow(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, any> | undefined | null,\r\n\t\tonRejected?:TSDNPromise.Reject<any> | undefined | null):void;\r\n\r\n\tabstract doneNow(\r\n\t\tonFulfilled:(v?:T) => any | undefined | null,\r\n\t\tonRejected?:(v?:any) => any | undefined | null):void;\r\n\r\n\r\n\t/**\r\n\t * Calls the respective handlers once the promise is resolved.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract thenSynchronous<TFulfilled = T, TRejected = never>(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled> | undefined | null,\r\n\t\tonRejected?:TSDNPromise.Reject<TRejected> | undefined | null):PromiseBase<TFulfilled | TRejected>;\r\n\r\n\t/**\r\n\t * Same as 'thenSynchronous' but does not return the result.  Returns the current promise instead.\r\n\t * You may not need an additional promise result, and this will not create a new one.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tthenThis(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, any> | undefined | null,\r\n\t\tonRejected?:TSDNPromise.Reject<any> | undefined | null):this;\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T) => any | undefined | null,\r\n\t\tonRejected?:(v?:any) => any | undefined | null):this\r\n\t{\r\n\t\tthis.doneNow(onFulfilled,onRejected);\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Standard .then method that defers execution until resolved.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t * @returns {TSDNPromise}\r\n\t */\r\n\r\n\tthen<TFulfilled = T, TRejected = never>(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled> | undefined | null,\r\n\t\tonRejected?:TSDNPromise.Reject<TRejected> | undefined | null):PromiseBase<TFulfilled | TRejected>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new TSDNPromise<TFulfilled | TRejected>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tthis.doneNow(\r\n\t\t\t\tresult =>\r\n\t\t\t\t\thandleResolutionMethods(resolve, reject, result, onFulfilled),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tonRejected\r\n\t\t\t\t\t\t? handleResolutionMethods(resolve, reject, error, onRejected)\r\n\t\t\t\t\t\t: reject(error)\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Same as .then but doesn't trap errors.  Exceptions may end up being fatal.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t * @returns {TSDNPromise}\r\n\t */\r\n\tthenAllowFatal<TFulfilled = T, TRejected = never>(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled> | undefined | null,\r\n\t\tonRejected?:TSDNPromise.Reject<TRejected> | undefined | null):PromiseBase<TFulfilled | TRejected>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new TSDNPromise<TFulfilled | TRejected>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tthis.doneNow(\r\n\t\t\t\tresult =>\r\n\t\t\t\t\tresolve(<any>(onFulfilled ? onFulfilled(result) : result)),\r\n\t\t\t\terror =>\r\n\t\t\t\t\treject(onRejected ? onRejected(error) : error)\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * .done is provided as a non-standard means that maps to similar functionality in other promise libraries.\r\n\t * As stated by promisejs.org: 'then' is to 'done' as 'map' is to 'forEach'.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tdone(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, any>,\r\n\t\tonRejected?:TSDNPromise.Reject<any>):void\r\n\t{\r\n\t\tdefer(() => this.doneNow(onFulfilled, onRejected));\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from the time called before continuing.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayFromNow(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new TSDNPromise<T>(\r\n\t\t\t(resolve, reject) =>\r\n\t\t\t{\r\n\t\t\t\tdefer(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.doneNow(\r\n\t\t\t\t\t\tv => resolve(v),\r\n\t\t\t\t\t\te => reject(e));\r\n\t\t\t\t}, milliseconds)\r\n\t\t\t},\r\n\t\t\ttrue // Since the resolve/reject is deferred.\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from after this promise resolves.\r\n\t * If the promise is already resolved, the delay will start from now.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayAfterResolve(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(this.isSettled) return this.delayFromNow(milliseconds);\r\n\r\n\t\treturn new TSDNPromise<T>(\r\n\t\t\t(resolve, reject) =>\r\n\t\t\t{\r\n\t\t\t\tthis.doneNow(\r\n\t\t\t\t\tv => defer(() => resolve(v), milliseconds),\r\n\t\t\t\t\te => defer(() => reject(e), milliseconds))\r\n\t\t\t},\r\n\t\t\ttrue // Since the resolve/reject is deferred.\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut for trapping a rejection.\r\n\t * @param onRejected\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\t'catch'<TResult = never>(onRejected:TSDNPromise.Reject<TResult>):PromiseBase<T | TResult>\r\n\t{\r\n\t\treturn this.then(VOID0, onRejected)\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut for trapping a rejection but will allow exceptions to propagate within the onRejected handler.\r\n\t * @param onRejected\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\tcatchAllowFatal<TResult = never>(onRejected:TSDNPromise.Reject<TResult>):PromiseBase<T | TResult>\r\n\t{\r\n\t\treturn this.thenAllowFatal(VOID0, onRejected)\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut to for handling either resolve or reject.\r\n\t * @param fin\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\t'finally'<TResult = never>(fin:() => TSDNPromise.Resolution<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn this.then(fin, fin);\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut to for handling either resolve or reject but will allow exceptions to propagate within the handler.\r\n\t * @param fin\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\tfinallyAllowFatal<TResult = never>(fin:() => TSDNPromise.Resolution<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn this.thenAllowFatal(fin, fin);\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut to for handling either resolve or reject.  Returns the current promise instead.\r\n\t * You may not need an additional promise result, and this will not create a new one.\r\n\t * @param fin\r\n\t * @param synchronous\r\n\t * @returns {PromiseBase}\r\n\t */\r\n\tfinallyThis(fin:Closure, synchronous?:boolean):this\r\n\t{\r\n\t\tconst f:Closure = synchronous ? fin : () => deferImmediate(fin);\r\n\t\tthis.doneNow(f, f);\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class Resolvable<T>\r\n\textends PromiseBase<T>\r\n{\r\n\r\n\tdoneNow(\r\n\t\tonFulfilled:(v?:T) => any,\r\n\t\tonRejected?:(v?:any) => any):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tswitch(this.state)\r\n\t\t{\r\n\t\t\tcase TSDNPromise.State.Fulfilled:\r\n\t\t\t\tif(onFulfilled) onFulfilled(this._result);\r\n\t\t\t\tbreak;\r\n\t\t\tcase TSDNPromise.State.Rejected:\r\n\t\t\t\tif(onRejected) onRejected(this._error);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tthenSynchronous<TFulfilled = T, TRejected = never>(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled> | undefined | null,\r\n\t\tonRejected?:TSDNPromise.Reject<TRejected> | undefined | null):PromiseBase<TFulfilled | TRejected>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tswitch(this.state)\r\n\t\t\t{\r\n\t\t\t\tcase TSDNPromise.State.Fulfilled:\r\n\t\t\t\t\treturn onFulfilled\r\n\t\t\t\t\t\t? resolve(this._result, onFulfilled, TSDNPromise.resolve)\r\n\t\t\t\t\t\t: <any>this; // Provided for catch cases.\r\n\t\t\t\tcase TSDNPromise.State.Rejected:\r\n\t\t\t\t\treturn onRejected\r\n\t\t\t\t\t\t? resolve(this._error, onRejected, TSDNPromise.resolve)\r\n\t\t\t\t\t\t: <any>this;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn new Rejected<any>(ex);\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"Invalid state for a resolved promise.\");\r\n\t}\r\n\r\n\r\n\r\n}\r\n\r\n/**\r\n * The simplest usable version of a promise which returns synchronously the resolved state provided.\r\n */\r\nexport abstract class Resolved<T>\r\n\textends Resolvable<T>\r\n{\r\n\tconstructor(state:TSDNPromise.State, result:T, error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._result = result;\r\n\t\tthis._error = error;\r\n\t\tthis._state = state;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * A fulfilled Resolved<T>.  Provided for readability.\r\n */\r\nexport class Fulfilled<T>\r\n\textends Resolved<T>\r\n{\r\n\tconstructor(value:T)\r\n\t{\r\n\t\tsuper(TSDNPromise.State.Fulfilled, value);\r\n\t}\r\n}\r\n\r\n/**\r\n * A rejected Resolved<T>.  Provided for readability.\r\n */\r\nexport class Rejected<T>\r\n\textends Resolved<T>\r\n{\r\n\tconstructor(error:any)\r\n\t{\r\n\t\tsuper(TSDNPromise.State.Rejected, VOID0, error);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Provided as a means for extending the interface of other PromiseLike<T> objects.\r\n */\r\nclass PromiseWrapper<T>\r\n\textends Resolvable<T>\r\n{\r\n\tconstructor(private _target:PromiseLike<T>)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(!_target)\r\n\t\t\tthrow new ArgumentNullException(TARGET);\r\n\r\n\t\tif(!isPromise(_target))\r\n\t\t\tthrow new ArgumentException(TARGET, \"Must be a promise-like object.\");\r\n\r\n\t\t_target.then(\r\n\t\t\t(v:T) =>\r\n\t\t\t{\r\n\t\t\t\tthis._state = TSDNPromise.State.Fulfilled;\r\n\t\t\t\tthis._result = v;\r\n\t\t\t\tthis._error = VOID0;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t},\r\n\t\t\te =>\r\n\t\t\t{\r\n\t\t\t\tthis._state = TSDNPromise.State.Rejected;\r\n\t\t\t\tthis._error = e;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t})\r\n\t}\r\n\r\n\tthenSynchronous<TFulfilled = T, TRejected = never>(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled>,\r\n\t\tonRejected?:TSDNPromise.Reject<TRejected>):PromiseBase<TFulfilled | TRejected>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tlet t = this._target;\r\n\t\tif(!t) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\treturn new TSDNPromise<TFulfilled | TRejected>((resolve, reject) =>\r\n\t\t{\r\n\t\t\thandleDispatch(t,\r\n\t\t\t\tresult => handleResolutionMethods(resolve, reject, result, onFulfilled),\r\n\t\t\t\terror => onRejected\r\n\t\t\t\t\t? handleResolutionMethods(resolve, null, error, onRejected)\r\n\t\t\t\t\t: reject(error)\r\n\t\t\t);\r\n\t\t}, true);\r\n\t}\r\n\r\n\tdoneNow(\r\n\t\tonFulfilled:(v?:T) => any,\r\n\t\tonRejected?:(v?:any) => any):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tlet t = this._target;\r\n\t\tif(t)\r\n\t\t\thandleDispatch(t, onFulfilled, onRejected);\r\n\t\telse\r\n\t\t\tsuper.doneNow(onFulfilled, onRejected);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._target = VOID0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * This promise class that facilitates pending resolution.\r\n */\r\nexport class TSDNPromise<T>\r\n\textends Resolvable<T>\r\n{\r\n\r\n\tprivate _waiting:IPromiseCallbacks<any>[] | null | undefined;\r\n\r\n\t/*\r\n\t * A note about deferring:\r\n\t * The caller can set resolveImmediate to true if they intend to initialize code that will end up being deferred itself.\r\n\t * This eliminates the extra defer that will occur internally.\r\n\t * But for the most part, resolveImmediate = false (the default) will ensure the constructor will not block.\r\n\t *\r\n\t * resolveUsing allows for the same ability but does not defer by default: allowing the caller to take on the work load.\r\n\t * If calling resolve or reject and a deferred response is desired, then use deferImmediate with a closure to do so.\r\n\t */\r\n\r\n\tconstructor(\r\n\t\tresolver?:TSDNPromise.Executor<T>, forceSynchronous:boolean = false)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(resolver) this.resolveUsing(resolver, forceSynchronous);\r\n\t}\r\n\r\n\tthenSynchronous<TFulfilled = T, TRejected = never>(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled> | undefined | null,\r\n\t\tonRejected?:TSDNPromise.Reject<TRejected> | undefined | null):PromiseBase<TFulfilled | TRejected>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\tconst p = new TSDNPromise<TFulfilled | TRejected>();\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected, p));\r\n\t\treturn p;\r\n\t}\r\n\r\n\tdoneNow(\r\n\t\tonFulfilled:(v?:T) => any,\r\n\t\tonRejected?:(v?:any) => any):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state)\r\n\t\t\treturn super.doneNow(onFulfilled, onRejected);\r\n\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected));\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._resolvedCalled = VOID0;\r\n\t}\r\n\r\n\t// Protects against double calling.\r\n\tprotected _resolvedCalled:boolean;\r\n\r\n\tresolveUsing(\r\n\t\tresolver:TSDNPromise.Executor<T>,\r\n\t\tforceSynchronous:boolean = false):void\r\n\t{\r\n\t\tif(!resolver)\r\n\t\t\tthrow new ArgumentNullException(\"resolver\");\r\n\t\tif(this._resolvedCalled)\r\n\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\tif(this.state)\r\n\t\t\tthrow new InvalidOperationException(\"Already resolved: \" + TSDNPromise.State[this.state]);\r\n\r\n\t\tthis._resolvedCalled = true;\r\n\r\n\t\tlet state = 0;\r\n\t\tconst rejectHandler = (reason:any) =>\r\n\t\t{\r\n\t\t\tif(state)\r\n\t\t\t{\r\n\t\t\t\t// Someone else's promise handling down stream could double call this. :\\\r\n\t\t\t\tconsole.warn(state== -1\r\n\t\t\t\t\t? \"Rejection called multiple times\"\r\n\t\t\t\t\t: \"Rejection called after fulfilled.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstate = -1;\r\n\t\t\t\tthis._resolvedCalled = false;\r\n\t\t\t\tthis.reject(reason);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst fulfillHandler = (v:any) =>\r\n\t\t{\r\n\t\t\tif(state)\r\n\t\t\t{\r\n\t\t\t\t// Someone else's promise handling down stream could double call this. :\\\r\n\t\t\t\tconsole.warn(state==1\r\n\t\t\t\t\t? \"Fulfill called multiple times\"\r\n\t\t\t\t\t: \"Fulfill called after rejection.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstate = 1;\r\n\t\t\t\tthis._resolvedCalled = false;\r\n\t\t\t\tthis.resolve(v);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// There are some performance edge cases where there caller is not blocking upstream and does not need to defer.\r\n\t\tif(forceSynchronous)\r\n\t\t\tresolver(fulfillHandler, rejectHandler);\r\n\t\telse\r\n\t\t\tdeferImmediate(() => resolver(fulfillHandler, rejectHandler));\r\n\r\n\t}\r\n\r\n\r\n\tprivate _emitDisposalRejection(p:PromiseBase<any>):boolean\r\n\t{\r\n\t\tconst d = p.wasDisposed;\r\n\t\tif(d) this._rejectInternal(newODE());\r\n\t\treturn d;\r\n\t}\r\n\r\n\tprivate _resolveInternal(result?:T | PromiseLike<T>):void\r\n\t{\r\n\t\tif(this.wasDisposed) return;\r\n\r\n\t\t// Note: Avoid recursion if possible.\r\n\r\n\t\t// Check ahead of time for resolution and resolve appropriately\r\n\t\twhile(result instanceof PromiseBase)\r\n\t\t{\r\n\t\t\tlet r:PromiseBase<T> = <any>result;\r\n\t\t\tif(this._emitDisposalRejection(r)) return;\r\n\t\t\tswitch(r.state)\r\n\t\t\t{\r\n\t\t\t\tcase TSDNPromise.State.Pending:\r\n\t\t\t\t\tr.doneNow(\r\n\t\t\t\t\t\tv => this._resolveInternal(v),\r\n\t\t\t\t\t\te => this._rejectInternal(e)\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase TSDNPromise.State.Rejected:\r\n\t\t\t\t\tthis._rejectInternal(r.error);\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase TSDNPromise.State.Fulfilled:\r\n\t\t\t\t\tresult = r.result;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(isPromise(result))\r\n\t\t{\r\n\t\t\tresult.then(\r\n\t\t\t\tv => this._resolveInternal(v),\r\n\t\t\t\te => this._rejectInternal(e)\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._state = TSDNPromise.State.Fulfilled;\r\n\r\n\t\t\tthis._result = result;\r\n\t\t\tthis._error = VOID0;\r\n\t\t\tconst o = this._waiting;\r\n\t\t\tif(o)\r\n\t\t\t{\r\n\t\t\t\tthis._waiting = VOID0;\r\n\t\t\t\tfor(let c of o)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet {onFulfilled, promise} = c;\r\n\t\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\t\t//let ex =\r\n\t\t\t\t\thandleResolution(<any>promise, result, onFulfilled);\r\n\t\t\t\t\t//if(!p && ex) console.error(\"Unhandled exception in onFulfilled:\",ex);\r\n\t\t\t\t}\r\n\t\t\t\to.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _rejectInternal(error:any):void\r\n\t{\r\n\r\n\t\tif(this.wasDisposed) return;\r\n\r\n\t\tthis._state = TSDNPromise.State.Rejected;\r\n\r\n\t\tthis._error = error;\r\n\t\tconst o = this._waiting;\r\n\t\tif(o)\r\n\t\t{\r\n\t\t\tthis._waiting = null; // null = finished. undefined = hasn't started.\r\n\t\t\tfor(let c of o)\r\n\t\t\t{\r\n\t\t\t\tlet {onRejected, promise} = c;\r\n\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\tif(onRejected)\r\n\t\t\t\t{\r\n\t\t\t\t\t//let ex =\r\n\t\t\t\t\thandleResolution(promise, error, onRejected);\r\n\t\t\t\t\t//if(!p && ex) console.error(\"Unhandled exception in onRejected:\",ex);\r\n\t\t\t\t}\r\n\t\t\t\telse if(promise) { //noinspection JSIgnoredPromiseFromCall\r\n\t\t\t\t\tpromise.reject(error);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\to.length = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tresolve(result?:T | PromiseLike<T>, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(<any>result==this)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot resolve a promise as itself.\");\r\n\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==TSDNPromise.State.Fulfilled && this._result===result) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the fulfilled state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._resolveInternal(result);\r\n\t}\r\n\r\n\r\n\treject(error:any, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==TSDNPromise.State.Rejected && this._error===error) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the rejected state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._rejectInternal(error);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * By providing an ArrayPromise we expose useful methods/shortcuts for dealing with array results.\r\n */\r\nexport class ArrayPromise<T>\r\n\textends TSDNPromise<T[]>\r\n{\r\n\r\n\t/**\r\n\t * Simplifies the use of a map function on an array of results when the source is assured to be an array.\r\n\t * @param transform\r\n\t * @returns {PromiseBase<Array<any>>}\r\n\t */\r\n\tmap<U>(transform:(value:T) => U):ArrayPromise<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new ArrayPromise<U>(resolve =>\r\n\t\t{\r\n\t\t\tthis.doneNow((result:T[]) => resolve(result.map(transform)));\r\n\t\t}, true);\r\n\t}\r\n\r\n\treduce(\r\n\t\treduction:(previousValue:T, currentValue:T, i?:number, array?:T[]) => T,\r\n\t\tinitialValue?:T):PromiseBase<T>\r\n\r\n\treduce<U>(\r\n\t\treduction:(previousValue:U, currentValue:T, i?:number, array?:T[]) => U,\r\n\t\tinitialValue:U):PromiseBase<U>\r\n\r\n\t/**\r\n\t * Simplifies the use of a reduce function on an array of results when the source is assured to be an array.\r\n\t * @param reduction\r\n\t * @param initialValue\r\n\t * @returns {PromiseBase<any>}\r\n\t */\r\n\treduce<U>(\r\n\t\treduction:(previousValue:U, currentValue:T, i?:number, array?:T[]) => U,\r\n\t\tinitialValue?:U):PromiseBase<U>\r\n\t{\r\n\r\n\t\treturn this\r\n\t\t\t.thenSynchronous((result:T[]) => result.reduce(reduction, <any>initialValue));\r\n\t}\r\n\r\n\tstatic fulfilled<T>(value:T[]):ArrayPromise<T>\r\n\t{\r\n\t\treturn new ArrayPromise<T>(resolve => value, true);\r\n\t}\r\n}\r\n\r\nconst PROMISE_COLLECTION = \"PromiseCollection\";\r\n/**\r\n * A Promise collection exposes useful methods for handling a collection of promises and their results.\r\n */\r\nexport class PromiseCollection<T>\r\n\textends DisposableBase\r\n{\r\n\tprivate _source:PromiseLike<T>[];\r\n\r\n\tconstructor(source:PromiseLike<T>[] | null | undefined)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = PROMISE_COLLECTION;\r\n\t\tthis._source = source && source.slice() || [];\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source.length = 0;\r\n\t\t(<any>this)._source = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a copy of the source promises.\r\n\t * @returns {PromiseLike<PromiseLike<any>>[]}\r\n\t */\r\n\tget promises():PromiseLike<T>[]\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this._source.slice();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, or is rejected with the same rejection reason as the first promise to be rejected.\r\n\t * @returns {PromiseBase<any>}\r\n\t */\r\n\tall():ArrayPromise<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn TSDNPromise.all(this._source);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n\t * or rejected.\r\n\t * @returns {PromiseBase<any>} A new Promise.\r\n\t */\r\n\trace():PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn TSDNPromise.race(this._source);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with array of provided promises when all provided promises have resolved (fulfill or reject).\r\n\t * Unlike .all this method waits for all rejections as well as fulfillment.\r\n\t * @returns {PromiseBase<PromiseLike<any>[]>}\r\n\t */\r\n\twaitAll():ArrayPromise<PromiseLike<T>>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn TSDNPromise.waitAll(this._source);\r\n\t}\r\n\r\n\t/**\r\n\t * Waits for all the values to resolve and then applies a transform.\r\n\t * @param transform\r\n\t * @returns {PromiseBase<Array<any>>}\r\n\t */\r\n\tmap<U>(transform:(value:T) => U):ArrayPromise<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new ArrayPromise<U>(resolve =>\r\n\t\t{\r\n\t\t\tthis.all()\r\n\t\t\t\t.doneNow((result:T[]) => resolve(result.map(transform)));\r\n\t\t}, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Applies a transform to each promise and defers the result.\r\n\t * Unlike map, this doesn't wait for all promises to resolve, ultimately improving the async nature of the request.\r\n\t * @param transform\r\n\t * @returns {PromiseCollection<U>}\r\n\t */\r\n\r\n\tpipe<U>(transform:(value:T) => U | PromiseLike<U>):PromiseCollection<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new PromiseCollection<U>(\r\n\t\t\tthis._source.map(p => handleSyncIfPossible(p, transform))\r\n\t\t);\r\n\t}\r\n\r\n\treduce(\r\n\t\treduction:(previousValue:T, currentValue:T, i?:number, array?:PromiseLike<T>[]) => T,\r\n\t\tinitialValue?:T | PromiseLike<T>):PromiseBase<T>\r\n\r\n\treduce<U>(\r\n\t\treduction:(previousValue:U, currentValue:T, i?:number, array?:PromiseLike<T>[]) => U,\r\n\t\tinitialValue:U | PromiseLike<U>):PromiseBase<U>\r\n\r\n\t/**\r\n\t * Behaves like array reduce.\r\n\t * Creates the promise chain necessary to produce the desired result.\r\n\t * @param reduction\r\n\t * @param initialValue\r\n\t * @returns {PromiseBase<PromiseLike<any>>}\r\n\t */\r\n\treduce<U>(\r\n\t\treduction:(previousValue:U, currentValue:T, i?:number, array?:PromiseLike<T>[]) => U,\r\n\t\tinitialValue?:U | PromiseLike<U>):PromiseBase<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn TSDNPromise.wrap<U>(this._source\r\n\t\t\t.reduce(\r\n\t\t\t\t(\r\n\t\t\t\t\tprevious:PromiseLike<U>,\r\n\t\t\t\t\tcurrent:PromiseLike<T>,\r\n\t\t\t\t\ti:number,\r\n\t\t\t\t\tarray:PromiseLike<T>[]) =>\r\n\t\t\t\t\thandleSyncIfPossible(previous,\r\n\t\t\t\t\t\t(p:U) => handleSyncIfPossible(current, (c:T) => reduction(p, c, i, array))),\r\n\r\n\t\t\t\t\tisPromise(initialValue)\r\n\t\t\t\t\t\t? initialValue\r\n\t\t\t\t\t\t: new Fulfilled(<any>initialValue)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}\r\n\r\nmodule pools\r\n{\r\n\r\n\t// export module pending\r\n\t// {\r\n\t//\r\n\t//\r\n\t// \tvar pool:ObjectPool<Promise<any>>;\r\n\t//\r\n\t// \tfunction getPool()\r\n\t// \t{\r\n\t// \t\treturn pool || (pool = new ObjectPool<Promise<any>>(40, factory, c=>c.dispose()));\r\n\t// \t}\r\n\t//\r\n\t// \tfunction factory():Promise<any>\r\n\t// \t{\r\n\t// \t\treturn new Promise();\r\n\t// \t}\r\n\t//\r\n\t// \texport function get():Promise<any>\r\n\t// \t{\r\n\t// \t\tvar p:any = getPool().take();\r\n\t// \t\tp.__wasDisposed = false;\r\n\t// \t\tp._state = Promise.State.Pending;\r\n\t// \t\treturn p;\r\n\t// \t}\r\n\t//\r\n\t// \texport function recycle<T>(c:Promise<T>):void\r\n\t// \t{\r\n\t// \t\tif(c) getPool().add(c);\r\n\t// \t}\r\n\t//\r\n\t// }\r\n\t//\r\n\t// export function recycle<T>(c:PromiseBase<T>):void\r\n\t// {\r\n\t// \tif(!c) return;\r\n\t// \tif(c instanceof Promise && c.constructor==Promise) pending.recycle(c);\r\n\t// \telse c.dispose();\r\n\t// }\r\n\r\n\r\n\texport module PromiseCallbacks\r\n\t{\r\n\r\n\t\tlet pool:ObjectPool<IPromiseCallbacks<any>>;\r\n\r\n\t\t//noinspection JSUnusedLocalSymbols\r\n\t\tfunction getPool()\r\n\t\t{\r\n\t\t\treturn pool\r\n\t\t\t\t|| (pool = new ObjectPool<IPromiseCallbacks<any>>(40, factory, c =>\r\n\t\t\t\t{\r\n\t\t\t\t\tc.onFulfilled = NULL;\r\n\t\t\t\t\tc.onRejected = NULL;\r\n\t\t\t\t\tc.promise = NULL;\r\n\t\t\t\t}));\r\n\t\t}\r\n\r\n\t\tfunction factory():IPromiseCallbacks<any>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tonFulfilled: NULL,\r\n\t\t\t\tonRejected: NULL,\r\n\t\t\t\tpromise: NULL\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\texport function init<T>(\r\n\t\t\tonFulfilled:TSDNPromise.Fulfill<T, any> | undefined | null,\r\n\t\t\tonRejected?:TSDNPromise.Reject<any> | undefined | null,\r\n\t\t\tpromise?:TSDNPromise<any>):IPromiseCallbacks<T>\r\n\t\t{\r\n\r\n\t\t\tconst c = getPool().take();\r\n\t\t\tc.onFulfilled = onFulfilled || undefined;\r\n\t\t\tc.onRejected = onRejected || undefined;\r\n\t\t\tc.promise = promise;\r\n\t\t\treturn c;\r\n\t\t}\r\n\r\n\t\texport function recycle<T>(c:IPromiseCallbacks<T>):void\r\n\t\t{\r\n\t\t\tgetPool().add(c);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\nexport module TSDNPromise\r\n{\r\n\r\n\t/**\r\n\t * The state of a promise.\r\n\t * https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md\r\n\t * If a promise is disposed the value will be undefined which will also evaluate (promise.state)==false.\r\n\t */\r\n\texport enum State {\r\n\t\tPending = 0,\r\n\t\tFulfilled = 1,\r\n\t\tRejected = -1\r\n\t}\r\n\tObject.freeze(State);\r\n\r\n\texport type Resolution<TResult> = TResult | PromiseLike<TResult>;\r\n\r\n\texport interface Fulfill<T, TResult>\r\n\t{\r\n\t\t(value:T):Resolution<TResult>\r\n\t}\r\n\r\n\texport interface Reject<TResult>\r\n\t{\r\n\t\t(reason:any):TResult | PromiseLike<TResult>;\r\n\t}\r\n\r\n\texport interface Then<T, TResult>\r\n\t{\r\n\t\t(onfulfilled?:Fulfill<T, TResult> | undefined | null, onrejected?:Reject<TResult> | undefined | null):PromiseLike<TResult>;\r\n\t\t(onfulfilled?:Fulfill<T, TResult> | undefined | null, onrejected?:Reject<void> | undefined | null):PromiseLike<TResult>;\r\n\t}\r\n\r\n\texport interface Executor<T>\r\n\t{\r\n\t\t(\r\n\t\t\tresolve:(value?:T | PromiseLike<T>) => void,\r\n\t\t\treject:(reason?:any) => void):void;\r\n\t}\r\n\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\texport interface Factory\r\n\t{\r\n\t\t<T>(executor:Executor<T>):PromiseLike<T>;\r\n\t}\r\n\r\n\texport function factory<T>(e:Executor<T>):TSDNPromise<T>\r\n\t{\r\n\t\treturn new TSDNPromise(e);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes a set of promises and returns a PromiseCollection.\r\n\t * @param promises\r\n\t */\r\n\texport function group<T>(promises:PromiseLike<T>[]):PromiseCollection<T>\r\n\texport function group<T>(\r\n\t\tpromise:PromiseLike<T>,\r\n\t\t...rest:PromiseLike<T>[]):PromiseCollection<T>\r\n\texport function group(\r\n\t\tfirst:PromiseLike<any> | PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseCollection<any>\r\n\t{\r\n\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\treturn new PromiseCollection(\r\n\t\t\t((first) instanceof (Array) ? first : [first])\r\n\t\t\t\t.concat(rest)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, or is rejected with the same rejection reason as the first promise to be rejected.\r\n\t */\r\n\texport function all<T>(promises:PromiseLike<T>[]):ArrayPromise<T>\r\n\texport function all<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):ArrayPromise<T>\r\n\texport function all(\r\n\t\tfirst:PromiseLike<any> | PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):ArrayPromise<any>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tlet promises = ((first) instanceof (Array) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v => !v)) return new ArrayPromise<any>(\r\n\t\t\tr => r(promises), true); // it's a new empty, reuse it. :|\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\treturn new ArrayPromise<any>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tlet result:any[] = [];\r\n\t\t\tlet len = promises.length;\r\n\t\t\tresult.length = len;\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i) => i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = () =>\r\n\t\t\t{\r\n\t\t\t\treject = VOID0;\r\n\t\t\t\tresolve = VOID0;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = VOID0;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = VOID0;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = () =>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(result);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(resolve)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = v;\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onReject = (e?:any) =>\r\n\t\t\t{\r\n\t\t\t\tlet r = reject;\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(e);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v => onFulfill(v, i), onReject);\r\n\t\t\t\telse remaining.remove(i);\r\n\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with array of provided promises when all provided promises have resolved (fulfill or reject).\r\n\t * Unlike .all this method waits for all rejections as well as fulfillment.\r\n\t */\r\n\texport function waitAll<T>(promises:PromiseLike<T>[]):ArrayPromise<PromiseLike<T>>\r\n\texport function waitAll<T>(\r\n\t\tpromise:PromiseLike<T>,\r\n\t\t...rest:PromiseLike<T>[]):ArrayPromise<PromiseLike<T>>\r\n\texport function waitAll(\r\n\t\tfirst:PromiseLike<any> | PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):ArrayPromise<PromiseLike<any>>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tconst promises = ((first) instanceof (Array) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v => !v)) return new ArrayPromise<any>(\r\n\t\t\tr => r(promises), true); // it's a new empty, reuse it. :|\r\n\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\treturn new ArrayPromise<any>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tlet len = promises.length;\r\n\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i) => i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = () =>\r\n\t\t\t{\r\n\t\t\t\treject = NULL;\r\n\t\t\t\tresolve = NULL;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = NULL;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = () =>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(promises);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolved = (i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(remaining)\r\n\t\t\t\t{\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v => onResolved(i), e => onResolved(i));\r\n\t\t\t\telse onResolved(i);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n\t * or rejected.\r\n\t * @param promises An array of Promises.\r\n\t * @returns A new Promise.\r\n\t */\r\n\texport function race<T>(promises:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race(\r\n\t\tfirst:PromiseLike<any> | PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<any>\r\n\t{\r\n\t\tlet promises = first && ((first) instanceof (Array) ? first : [first]).concat(rest); // yay a copy?\r\n\t\tif(!promises || !promises.length || !(promises = promises.filter(v => v!=null)).length)\r\n\t\t\tthrow new ArgumentException(\"Nothing to wait for.\");\r\n\r\n\t\tconst len = promises.length;\r\n\r\n\t\t// Only one?  Nothing to race.\r\n\t\tif(len==1) return wrap(promises[0]);\r\n\r\n\t\t// Look for already resolved promises and the first one wins.\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tconst p:any = promises[i];\r\n\t\t\tif(p instanceof PromiseBase && p.isSettled) return p;\r\n\t\t}\r\n\r\n\t\treturn new TSDNPromise((resolve, reject) =>\r\n\t\t{\r\n\t\t\tlet cleanup = () =>\r\n\t\t\t{\r\n\t\t\t\treject = NULL;\r\n\t\t\t\tresolve = NULL;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = NULL;\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolve = (r:(x:any) => void, v:any) =>\r\n\t\t\t{\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(v);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any) => onResolve(resolve, v);\r\n\t\t\tlet onReject = (e?:any) => onResolve(reject, e);\r\n\r\n\t\t\tfor(let p of promises)\r\n\t\t\t{\r\n\t\t\t\tif(!resolve) break;\r\n\t\t\t\tp.then(onFulfill, onReject);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// // race<T>(values: Iterable<T | PromiseLike<T>>): Promise<T>;\r\n\r\n\t/**\r\n\t * Creates a new resolved promise .\r\n\t * @returns A resolved promise.\r\n\t */\r\n\texport function resolve():PromiseBase<void>\r\n\r\n\t/**\r\n\t * Creates a new resolved promise for the provided value.\r\n\t * @param value A value or promise.\r\n\t * @returns A promise whose internal state matches the provided promise.\r\n\t */\r\n\texport function resolve<T>(value:T | PromiseLike<T>):PromiseBase<T>;\r\n\texport function resolve(value?:any):PromiseBase<any>\r\n\t{\r\n\r\n\t\treturn isPromise(value) ? wrap(value) : new Fulfilled(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Syntactic shortcut for avoiding 'new'.\r\n\t * @param resolver\r\n\t * @param forceSynchronous\r\n\t * @returns {TSDNPromise}\r\n\t */\r\n\texport function using<T>(\r\n\t\tresolver:TSDNPromise.Executor<T>,\r\n\t\tforceSynchronous:boolean = false):PromiseBase<T>\r\n\t{\r\n\t\treturn new TSDNPromise<T>(resolver, forceSynchronous);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes a set of values or promises and returns a PromiseCollection.\r\n\t * Similar to 'group' but calls resolve on each entry.\r\n\t * @param resolutions\r\n\t */\r\n\texport function resolveAll<T>(resolutions:Array<T | PromiseLike<T>>):PromiseCollection<T>;\r\n\texport function resolveAll<T>(\r\n\t\tpromise:T | PromiseLike<T>,\r\n\t\t...rest:Array<T | PromiseLike<T>>):PromiseCollection<T>\r\n\texport function resolveAll(\r\n\t\tfirst:any | PromiseLike<any> | Array<any | PromiseLike<any>>,\r\n\t\t...rest:Array<any | PromiseLike<any>>):PromiseCollection<any>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"resolutions\");\r\n\t\treturn new PromiseCollection(\r\n\t\t\t((first) instanceof (Array) ? first : [first])\r\n\t\t\t\t.concat(rest)\r\n\t\t\t\t.map((v:any) => resolve(v)));\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a PromiseCollection containing promises that will resolve on the next tick using the transform function.\r\n\t * This utility function does not chain promises together to create the result,\r\n\t * it only uses one promise per transform.\r\n\t * @param source\r\n\t * @param transform\r\n\t * @returns {PromiseCollection<T>}\r\n\t */\r\n\texport function map<T, U>(source:T[], transform:(value:T) => U):PromiseCollection<U>\r\n\t{\r\n\t\treturn new PromiseCollection<U>(\r\n\t\t\tsource.map(d => new TSDNPromise<U>((r, j) =>\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tr(transform(d));\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tj(ex);\r\n\t\t\t\t}\r\n\t\t\t}))\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new rejected promise for the provided reason.\r\n\t * @param reason The reason the promise was rejected.\r\n\t * @returns A new rejected Promise.\r\n\t */\r\n\texport function reject<T>(reason:T):PromiseBase<T>\r\n\t{\r\n\t\treturn new Rejected<T>(reason);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes any Promise-Like object and ensures an extended version of it from this module.\r\n\t * @param target The Promise-Like object\r\n\t * @returns A new target that simply extends the target.\r\n\t */\r\n\texport function wrap<T>(target:T | PromiseLike<T>):PromiseBase<T>\r\n\t{\r\n\t\tif(!target) throw new ArgumentNullException(TARGET);\r\n\t\treturn isPromise(target)\r\n\t\t\t? (target instanceof PromiseBase ? target : new PromiseWrapper(target))\r\n\t\t\t: new Fulfilled<T>(target);\r\n\t}\r\n\r\n\t/**\r\n\t * A function that acts like a 'then' method (aka then-able) can be extended by providing a function that takes an onFulfill and onReject.\r\n\t * @param then\r\n\t * @returns {PromiseWrapper<T>}\r\n\t */\r\n\texport function createFrom<T>(then:Then<T, any>):PromiseBase<T>\r\n\t{\r\n\t\tif(!then) throw new ArgumentNullException(THEN);\r\n\t\treturn new PromiseWrapper<T>({then: then});\r\n\t}\r\n\r\n}\r\n\r\n\r\ninterface IPromiseCallbacks<T>\r\n{\r\n\tonFulfilled?:TSDNPromise.Fulfill<T, any>;\r\n\tonRejected?:TSDNPromise.Reject<any>;\r\n\tpromise?:TSDNPromise<any>;\r\n}\r\n\r\nexport {TSDNPromise as Promise};\r\n\r\nexport default TSDNPromise;\r\n\r\n\r\n"]}