{"version":3,"sources":["System/Promises/Promise.ts"],"names":[],"mappings":"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","file":"Promise.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n * Although most of the following code is written from scratch, it is\r\n * heavily influenced by Q (https://github.com/kriskowal/q) and uses some of Q's spec.\r\n */\r\n/*\r\n * Resources:\r\n * https://promisesaplus.com/\r\n * https://github.com/kriskowal/q\r\n */\r\n\r\nimport Type from \"../Types\";\r\nimport {deferImmediate} from \"../Threading/deferImmediate\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {ObjectPool} from \"../Disposable/ObjectPool\";\r\nimport {Set} from \"../Collections/Set\";\r\nimport {defer} from \"../Threading/defer\";\r\nimport {ObjectDisposedException} from \"../Disposable/ObjectDisposedException\";\r\nimport __extendsImport from \"../../extends\";\r\nimport {Closure} from \"../FunctionTypes\";\r\n//noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0, NULL:any = null, PROMISE = \"Promise\", PROMISE_STATE = PROMISE + \"State\",\r\n      THEN                                                                    = \"then\", TARGET                                                   = \"target\";\r\n\r\nfunction isPromise<T>(value:any):value is PromiseLike<T>\r\n{\r\n\treturn Type.hasMemberOfType(value, THEN, Type.FUNCTION);\r\n}\r\n\r\nfunction resolve<T>(\r\n\tvalue:TSDNPromise.Resolution<T>, resolver:(v:TSDNPromise.Resolution<T>) => any,\r\n\tpromiseFactory:(v:any) => PromiseBase<any>):PromiseBase<any>\r\n{\r\n\tlet nextValue = resolver\r\n\t\t? resolver(value)\r\n\t\t: value;\r\n\r\n\treturn nextValue && isPromise(nextValue)\r\n\t\t? TSDNPromise.wrap(nextValue)\r\n\t\t: promiseFactory(nextValue);\r\n}\r\n\r\nfunction handleResolution(\r\n\tp:TSDNPromise<any> | null | undefined,\r\n\tvalue:TSDNPromise.Resolution<any>,\r\n\tresolver?:(v:TSDNPromise.Resolution<any>) => any):any\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(p)\r\n\t\t{ //noinspection JSIgnoredPromiseFromCall\r\n\t\t\tp.resolve(v);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tcatch(ex)\r\n\t{\r\n\t\tif(p)\r\n\t\t{ //noinspection JSIgnoredPromiseFromCall\r\n\t\t\tp.reject(ex);\r\n\t\t}\r\n\t\treturn ex;\r\n\t}\r\n}\r\n\r\nexport type Resolver = (v:TSDNPromise.Resolution<any>) => any;\r\n\r\nfunction handleResolutionMethods(\r\n\ttargetFulfill:TSDNPromise.Fulfill<any, any> | null | undefined,\r\n\ttargetReject:TSDNPromise.Reject<any> | null | undefined,\r\n\tvalue:TSDNPromise.Resolution<any>,\r\n\tresolver?:Resolver | null | undefined ):void\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(targetFulfill) targetFulfill(v);\r\n\t}\r\n\tcatch(ex)\r\n\t{ if(targetReject) targetReject(ex); }\r\n}\r\n\r\nfunction handleDispatch<T, TFulfilled = T, TRejected = never>(\r\n\tp:PromiseLike<T>,\r\n\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled>,\r\n\tonRejected?:TSDNPromise.Reject<TRejected>):void\r\n{\r\n\tif(p instanceof PromiseBase)\r\n\t{\r\n\t\tp.doneNow(onFulfilled, onRejected);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tp.then(<any>onFulfilled, onRejected);\r\n\t}\r\n}\r\n\r\nfunction handleSyncIfPossible<T, TFulfilled = T, TRejected = never>(\r\n\tp:PromiseLike<T>,\r\n\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled>,\r\n\tonRejected?:TSDNPromise.Reject<TRejected>):PromiseLike<TFulfilled | TRejected>\r\n{\r\n\tif(p instanceof PromiseBase)\r\n\t\treturn p.thenSynchronous(onFulfilled, onRejected);\r\n\telse\r\n\t\treturn p.then(onFulfilled, onRejected);\r\n}\r\n\r\nfunction newODE()\r\n{\r\n\treturn new ObjectDisposedException(\"TSDNPromise\", \"An underlying promise-result was disposed.\");\r\n}\r\n\r\nexport class PromiseState<T>\r\n\textends DisposableBase\r\n{\r\n\r\n\tconstructor(\r\n\t\tprotected _state:TSDNPromise.State,\r\n\t\tprotected _result?:T,\r\n\t\tprotected _error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = PROMISE_STATE;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis._state = VOID0;\r\n\t\tthis._result = VOID0;\r\n\t\tthis._error = VOID0;\r\n\t}\r\n\r\n\tprotected getState():TSDNPromise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget state():TSDNPromise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget isPending():boolean\r\n\t{\r\n\t\treturn this.getState()===TSDNPromise.State.Pending;\r\n\t}\r\n\r\n\tget isSettled():boolean\r\n\t{\r\n\t\treturn this.getState()!=TSDNPromise.State.Pending; // Will also include undefined==0 aka disposed!=resolved.\r\n\t}\r\n\r\n\tget isFulfilled():boolean\r\n\t{\r\n\t\treturn this.getState()===TSDNPromise.State.Fulfilled;\r\n\t}\r\n\r\n\tget isRejected():boolean\r\n\t{\r\n\t\treturn this.getState()===TSDNPromise.State.Rejected;\r\n\t}\r\n\r\n\t/*\r\n\t * Providing overrides allows for special defer or lazy sub classes.\r\n\t */\r\n\tprotected getResult():T | undefined\r\n\t{\r\n\t\treturn this._result;\r\n\t}\r\n\r\n\tget result():T | undefined\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tprotected getError():any\r\n\t{\r\n\t\treturn this._error;\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getError();\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class PromiseBase<T>\r\n\textends PromiseState<T>\r\n\timplements PromiseLike<T>, Promise<T>\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(TSDNPromise.State.Pending);\r\n\t\tthis._disposableObjectName = PROMISE;\r\n\t}\r\n\r\n\t/**\r\n\t * .doneNow is provided as a non-standard means that synchronously resolves as the end of a promise chain.\r\n\t * As stated by promisejs.org: 'then' is to 'done' as 'map' is to 'forEach'.\r\n\t * It is the underlying method by which propagation occurs.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract doneNow(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, any> | undefined | null,\r\n\t\tonRejected?:TSDNPromise.Reject<any> | undefined | null):void;\r\n\r\n\tabstract doneNow(\r\n\t\tonFulfilled:(v?:T) => any | undefined | null,\r\n\t\tonRejected?:(v?:any) => any | undefined | null):void;\r\n\r\n\r\n\t/**\r\n\t * Calls the respective handlers once the promise is resolved.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract thenSynchronous<TFulfilled = T, TRejected = never>(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled> | undefined | null,\r\n\t\tonRejected?:TSDNPromise.Reject<TRejected> | undefined | null):PromiseBase<TFulfilled | TRejected>;\r\n\r\n\t/**\r\n\t * Same as 'thenSynchronous' but does not return the result.  Returns the current promise instead.\r\n\t * You may not need an additional promise result, and this will not create a new one.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tthenThis(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, any> | undefined | null,\r\n\t\tonRejected?:TSDNPromise.Reject<any> | undefined | null):this;\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T) => any | undefined | null,\r\n\t\tonRejected?:(v?:any) => any | undefined | null):this\r\n\t{\r\n\t\tthis.doneNow(onFulfilled,onRejected);\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Standard .then method that defers execution until resolved.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t * @returns {TSDNPromise}\r\n\t */\r\n\r\n\tthen<TFulfilled = T, TRejected = never>(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled> | undefined | null,\r\n\t\tonRejected?:TSDNPromise.Reject<TRejected> | undefined | null):PromiseBase<TFulfilled | TRejected>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new TSDNPromise<TFulfilled | TRejected>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tthis.doneNow(\r\n\t\t\t\tresult =>\r\n\t\t\t\t\thandleResolutionMethods(resolve, reject, result, onFulfilled),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tonRejected\r\n\t\t\t\t\t\t? handleResolutionMethods(resolve, reject, error, onRejected)\r\n\t\t\t\t\t\t: reject(error)\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Same as .then but doesn't trap errors.  Exceptions may end up being fatal.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t * @returns {TSDNPromise}\r\n\t */\r\n\tthenAllowFatal<TFulfilled = T, TRejected = never>(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled> | undefined | null,\r\n\t\tonRejected?:TSDNPromise.Reject<TRejected> | undefined | null):PromiseBase<TFulfilled | TRejected>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new TSDNPromise<TFulfilled | TRejected>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tthis.doneNow(\r\n\t\t\t\tresult =>\r\n\t\t\t\t\tresolve(<any>(onFulfilled ? onFulfilled(result) : result)),\r\n\t\t\t\terror =>\r\n\t\t\t\t\treject(onRejected ? onRejected(error) : error)\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * .done is provided as a non-standard means that maps to similar functionality in other promise libraries.\r\n\t * As stated by promisejs.org: 'then' is to 'done' as 'map' is to 'forEach'.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tdone(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, any>,\r\n\t\tonRejected?:TSDNPromise.Reject<any>):void\r\n\t{\r\n\t\tdefer(() => this.doneNow(onFulfilled, onRejected));\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from the time called before continuing.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayFromNow(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new TSDNPromise<T>(\r\n\t\t\t(resolve, reject) =>\r\n\t\t\t{\r\n\t\t\t\tdefer(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.doneNow(\r\n\t\t\t\t\t\tv => resolve(v),\r\n\t\t\t\t\t\te => reject(e));\r\n\t\t\t\t}, milliseconds)\r\n\t\t\t},\r\n\t\t\ttrue // Since the resolve/reject is deferred.\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from after this promise resolves.\r\n\t * If the promise is already resolved, the delay will start from now.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayAfterResolve(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(this.isSettled) return this.delayFromNow(milliseconds);\r\n\r\n\t\treturn new TSDNPromise<T>(\r\n\t\t\t(resolve, reject) =>\r\n\t\t\t{\r\n\t\t\t\tthis.doneNow(\r\n\t\t\t\t\tv => defer(() => resolve(v), milliseconds),\r\n\t\t\t\t\te => defer(() => reject(e), milliseconds))\r\n\t\t\t},\r\n\t\t\ttrue // Since the resolve/reject is deferred.\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut for trapping a rejection.\r\n\t * @param onRejected\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\t'catch'<TResult = never>(onRejected:TSDNPromise.Reject<TResult>):PromiseBase<T | TResult>\r\n\t{\r\n\t\treturn this.then(VOID0, onRejected)\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut for trapping a rejection but will allow exceptions to propagate within the onRejected handler.\r\n\t * @param onRejected\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\tcatchAllowFatal<TResult = never>(onRejected:TSDNPromise.Reject<TResult>):PromiseBase<T | TResult>\r\n\t{\r\n\t\treturn this.thenAllowFatal(VOID0, onRejected)\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut to for handling either resolve or reject.\r\n\t * @param fin\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\t'finally'<TResult = never>(fin:() => TSDNPromise.Resolution<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn this.then(fin, fin);\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut to for handling either resolve or reject but will allow exceptions to propagate within the handler.\r\n\t * @param fin\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\tfinallyAllowFatal<TResult = never>(fin:() => TSDNPromise.Resolution<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn this.thenAllowFatal(fin, fin);\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut to for handling either resolve or reject.  Returns the current promise instead.\r\n\t * You may not need an additional promise result, and this will not create a new one.\r\n\t * @param fin\r\n\t * @param synchronous\r\n\t * @returns {PromiseBase}\r\n\t */\r\n\tfinallyThis(fin:Closure, synchronous?:boolean):this\r\n\t{\r\n\t\tconst f:Closure = synchronous ? fin : () => deferImmediate(fin);\r\n\t\tthis.doneNow(f, f);\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class Resolvable<T>\r\n\textends PromiseBase<T>\r\n{\r\n\r\n\tdoneNow(\r\n\t\tonFulfilled:(v?:T) => any,\r\n\t\tonRejected?:(v?:any) => any):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tswitch(this.state)\r\n\t\t{\r\n\t\t\tcase TSDNPromise.State.Fulfilled:\r\n\t\t\t\tif(onFulfilled) onFulfilled(this._result);\r\n\t\t\t\tbreak;\r\n\t\t\tcase TSDNPromise.State.Rejected:\r\n\t\t\t\tif(onRejected) onRejected(this._error);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tthenSynchronous<TFulfilled = T, TRejected = never>(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled> | undefined | null,\r\n\t\tonRejected?:TSDNPromise.Reject<TRejected> | undefined | null):PromiseBase<TFulfilled | TRejected>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tswitch(this.state)\r\n\t\t\t{\r\n\t\t\t\tcase TSDNPromise.State.Fulfilled:\r\n\t\t\t\t\treturn onFulfilled\r\n\t\t\t\t\t\t? resolve(this._result, onFulfilled, TSDNPromise.resolve)\r\n\t\t\t\t\t\t: <any>this; // Provided for catch cases.\r\n\t\t\t\tcase TSDNPromise.State.Rejected:\r\n\t\t\t\t\treturn onRejected\r\n\t\t\t\t\t\t? resolve(this._error, onRejected, TSDNPromise.resolve)\r\n\t\t\t\t\t\t: <any>this;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn new Rejected<any>(ex);\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"Invalid state for a resolved promise.\");\r\n\t}\r\n\r\n\r\n\r\n}\r\n\r\n/**\r\n * The simplest usable version of a promise which returns synchronously the resolved state provided.\r\n */\r\nexport abstract class Resolved<T>\r\n\textends Resolvable<T>\r\n{\r\n\tconstructor(state:TSDNPromise.State, result:T, error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._result = result;\r\n\t\tthis._error = error;\r\n\t\tthis._state = state;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * A fulfilled Resolved<T>.  Provided for readability.\r\n */\r\nexport class Fulfilled<T>\r\n\textends Resolved<T>\r\n{\r\n\tconstructor(value:T)\r\n\t{\r\n\t\tsuper(TSDNPromise.State.Fulfilled, value);\r\n\t}\r\n}\r\n\r\n/**\r\n * A rejected Resolved<T>.  Provided for readability.\r\n */\r\nexport class Rejected<T>\r\n\textends Resolved<T>\r\n{\r\n\tconstructor(error:any)\r\n\t{\r\n\t\tsuper(TSDNPromise.State.Rejected, VOID0, error);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Provided as a means for extending the interface of other PromiseLike<T> objects.\r\n */\r\nclass PromiseWrapper<T>\r\n\textends Resolvable<T>\r\n{\r\n\tconstructor(private _target:PromiseLike<T>)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(!_target)\r\n\t\t\tthrow new ArgumentNullException(TARGET);\r\n\r\n\t\tif(!isPromise(_target))\r\n\t\t\tthrow new ArgumentException(TARGET, \"Must be a promise-like object.\");\r\n\r\n\t\t_target.then(\r\n\t\t\t(v:T) =>\r\n\t\t\t{\r\n\t\t\t\tthis._state = TSDNPromise.State.Fulfilled;\r\n\t\t\t\tthis._result = v;\r\n\t\t\t\tthis._error = VOID0;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t},\r\n\t\t\te =>\r\n\t\t\t{\r\n\t\t\t\tthis._state = TSDNPromise.State.Rejected;\r\n\t\t\t\tthis._error = e;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t})\r\n\t}\r\n\r\n\tthenSynchronous<TFulfilled = T, TRejected = never>(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled>,\r\n\t\tonRejected?:TSDNPromise.Reject<TRejected>):PromiseBase<TFulfilled | TRejected>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tlet t = this._target;\r\n\t\tif(!t) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\treturn new TSDNPromise<TFulfilled | TRejected>((resolve, reject) =>\r\n\t\t{\r\n\t\t\thandleDispatch(t,\r\n\t\t\t\tresult => handleResolutionMethods(resolve, reject, result, onFulfilled),\r\n\t\t\t\terror => onRejected\r\n\t\t\t\t\t? handleResolutionMethods(resolve, null, error, onRejected)\r\n\t\t\t\t\t: reject(error)\r\n\t\t\t);\r\n\t\t}, true);\r\n\t}\r\n\r\n\tdoneNow(\r\n\t\tonFulfilled:(v?:T) => any,\r\n\t\tonRejected?:(v?:any) => any):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tlet t = this._target;\r\n\t\tif(t)\r\n\t\t\thandleDispatch(t, onFulfilled, onRejected);\r\n\t\telse\r\n\t\t\tsuper.doneNow(onFulfilled, onRejected);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._target = VOID0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * This promise class that facilitates pending resolution.\r\n */\r\nexport class TSDNPromise<T>\r\n\textends Resolvable<T>\r\n{\r\n\r\n\tprivate _waiting:IPromiseCallbacks<any>[] | null | undefined;\r\n\r\n\t/*\r\n\t * A note about deferring:\r\n\t * The caller can set resolveImmediate to true if they intend to initialize code that will end up being deferred itself.\r\n\t * This eliminates the extra defer that will occur internally.\r\n\t * But for the most part, resolveImmediate = false (the default) will ensure the constructor will not block.\r\n\t *\r\n\t * resolveUsing allows for the same ability but does not defer by default: allowing the caller to take on the work load.\r\n\t * If calling resolve or reject and a deferred response is desired, then use deferImmediate with a closure to do so.\r\n\t */\r\n\r\n\tconstructor(\r\n\t\tresolver?:TSDNPromise.Executor<T>, forceSynchronous:boolean = false)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(resolver) this.resolveUsing(resolver, forceSynchronous);\r\n\t}\r\n\r\n\tthenSynchronous<TFulfilled = T, TRejected = never>(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, TFulfilled> | undefined | null,\r\n\t\tonRejected?:TSDNPromise.Reject<TRejected> | undefined | null):PromiseBase<TFulfilled | TRejected>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\tconst p = new TSDNPromise<TFulfilled | TRejected>();\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected, p));\r\n\t\treturn p;\r\n\t}\r\n\r\n\tdoneNow(\r\n\t\tonFulfilled:(v?:T) => any,\r\n\t\tonRejected?:(v?:any) => any):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state)\r\n\t\t\treturn super.doneNow(onFulfilled, onRejected);\r\n\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected));\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._resolvedCalled = VOID0;\r\n\t}\r\n\r\n\t// Protects against double calling.\r\n\tprotected _resolvedCalled:boolean;\r\n\r\n\tresolveUsing(\r\n\t\tresolver:TSDNPromise.Executor<T>,\r\n\t\tforceSynchronous:boolean = false):void\r\n\t{\r\n\t\tif(!resolver)\r\n\t\t\tthrow new ArgumentNullException(\"resolver\");\r\n\t\tif(this._resolvedCalled)\r\n\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\tif(this.state)\r\n\t\t\tthrow new InvalidOperationException(\"Already resolved: \" + TSDNPromise.State[this.state]);\r\n\r\n\t\tthis._resolvedCalled = true;\r\n\r\n\t\tlet state = 0;\r\n\t\tconst rejectHandler = (reason:any) =>\r\n\t\t{\r\n\t\t\tif(state)\r\n\t\t\t{\r\n\t\t\t\t// Someone else's promise handling down stream could double call this. :\\\r\n\t\t\t\tconsole.warn(state== -1\r\n\t\t\t\t\t? \"Rejection called multiple times\"\r\n\t\t\t\t\t: \"Rejection called after fulfilled.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstate = -1;\r\n\t\t\t\tthis._resolvedCalled = false;\r\n\t\t\t\tthis.reject(reason);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst fulfillHandler = (v:any) =>\r\n\t\t{\r\n\t\t\tif(state)\r\n\t\t\t{\r\n\t\t\t\t// Someone else's promise handling down stream could double call this. :\\\r\n\t\t\t\tconsole.warn(state==1\r\n\t\t\t\t\t? \"Fulfill called multiple times\"\r\n\t\t\t\t\t: \"Fulfill called after rejection.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstate = 1;\r\n\t\t\t\tthis._resolvedCalled = false;\r\n\t\t\t\tthis.resolve(v);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// There are some performance edge cases where there caller is not blocking upstream and does not need to defer.\r\n\t\tif(forceSynchronous)\r\n\t\t\tresolver(fulfillHandler, rejectHandler);\r\n\t\telse\r\n\t\t\tdeferImmediate(() => resolver(fulfillHandler, rejectHandler));\r\n\r\n\t}\r\n\r\n\r\n\tprivate _emitDisposalRejection(p:PromiseBase<any>):boolean\r\n\t{\r\n\t\tconst d = p.wasDisposed;\r\n\t\tif(d) this._rejectInternal(newODE());\r\n\t\treturn d;\r\n\t}\r\n\r\n\tprivate _resolveInternal(result?:T | PromiseLike<T>):void\r\n\t{\r\n\t\tif(this.wasDisposed) return;\r\n\r\n\t\t// Note: Avoid recursion if possible.\r\n\r\n\t\t// Check ahead of time for resolution and resolve appropriately\r\n\t\twhile(result instanceof PromiseBase)\r\n\t\t{\r\n\t\t\tlet r:PromiseBase<T> = <any>result;\r\n\t\t\tif(this._emitDisposalRejection(r)) return;\r\n\t\t\tswitch(r.state)\r\n\t\t\t{\r\n\t\t\t\tcase TSDNPromise.State.Pending:\r\n\t\t\t\t\tr.doneNow(\r\n\t\t\t\t\t\tv => this._resolveInternal(v),\r\n\t\t\t\t\t\te => this._rejectInternal(e)\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase TSDNPromise.State.Rejected:\r\n\t\t\t\t\tthis._rejectInternal(r.error);\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase TSDNPromise.State.Fulfilled:\r\n\t\t\t\t\tresult = r.result;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(isPromise(result))\r\n\t\t{\r\n\t\t\tresult.then(\r\n\t\t\t\tv => this._resolveInternal(v),\r\n\t\t\t\te => this._rejectInternal(e)\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._state = TSDNPromise.State.Fulfilled;\r\n\r\n\t\t\tthis._result = result;\r\n\t\t\tthis._error = VOID0;\r\n\t\t\tconst o = this._waiting;\r\n\t\t\tif(o)\r\n\t\t\t{\r\n\t\t\t\tthis._waiting = VOID0;\r\n\t\t\t\tfor(let c of o)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet {onFulfilled, promise} = c;\r\n\t\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\t\t//let ex =\r\n\t\t\t\t\thandleResolution(<any>promise, result, onFulfilled);\r\n\t\t\t\t\t//if(!p && ex) console.error(\"Unhandled exception in onFulfilled:\",ex);\r\n\t\t\t\t}\r\n\t\t\t\to.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _rejectInternal(error:any):void\r\n\t{\r\n\r\n\t\tif(this.wasDisposed) return;\r\n\r\n\t\tthis._state = TSDNPromise.State.Rejected;\r\n\r\n\t\tthis._error = error;\r\n\t\tconst o = this._waiting;\r\n\t\tif(o)\r\n\t\t{\r\n\t\t\tthis._waiting = null; // null = finished. undefined = hasn't started.\r\n\t\t\tfor(let c of o)\r\n\t\t\t{\r\n\t\t\t\tlet {onRejected, promise} = c;\r\n\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\tif(onRejected)\r\n\t\t\t\t{\r\n\t\t\t\t\t//let ex =\r\n\t\t\t\t\thandleResolution(promise, error, onRejected);\r\n\t\t\t\t\t//if(!p && ex) console.error(\"Unhandled exception in onRejected:\",ex);\r\n\t\t\t\t}\r\n\t\t\t\telse if(promise) { //noinspection JSIgnoredPromiseFromCall\r\n\t\t\t\t\tpromise.reject(error);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\to.length = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tresolve(result?:T | PromiseLike<T>, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(<any>result==this)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot resolve a promise as itself.\");\r\n\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==TSDNPromise.State.Fulfilled && this._result===result) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the fulfilled state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._resolveInternal(result);\r\n\t}\r\n\r\n\r\n\treject(error:any, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==TSDNPromise.State.Rejected && this._error===error) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the rejected state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._rejectInternal(error);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * By providing an ArrayPromise we expose useful methods/shortcuts for dealing with array results.\r\n */\r\nexport class ArrayPromise<T>\r\n\textends TSDNPromise<T[]>\r\n{\r\n\r\n\t/**\r\n\t * Simplifies the use of a map function on an array of results when the source is assured to be an array.\r\n\t * @param transform\r\n\t * @returns {PromiseBase<Array<any>>}\r\n\t */\r\n\tmap<U>(transform:(value:T) => U):ArrayPromise<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new ArrayPromise<U>(resolve =>\r\n\t\t{\r\n\t\t\tthis.doneNow((result:T[]) => resolve(result.map(transform)));\r\n\t\t}, true);\r\n\t}\r\n\r\n\treduce(\r\n\t\treduction:(previousValue:T, currentValue:T, i?:number, array?:T[]) => T,\r\n\t\tinitialValue?:T):PromiseBase<T>\r\n\r\n\treduce<U>(\r\n\t\treduction:(previousValue:U, currentValue:T, i?:number, array?:T[]) => U,\r\n\t\tinitialValue:U):PromiseBase<U>\r\n\r\n\t/**\r\n\t * Simplifies the use of a reduce function on an array of results when the source is assured to be an array.\r\n\t * @param reduction\r\n\t * @param initialValue\r\n\t * @returns {PromiseBase<any>}\r\n\t */\r\n\treduce<U>(\r\n\t\treduction:(previousValue:U, currentValue:T, i?:number, array?:T[]) => U,\r\n\t\tinitialValue?:U):PromiseBase<U>\r\n\t{\r\n\r\n\t\treturn this\r\n\t\t\t.thenSynchronous((result:T[]) => result.reduce(reduction, <any>initialValue));\r\n\t}\r\n\r\n\tstatic fulfilled<T>(value:T[]):ArrayPromise<T>\r\n\t{\r\n\t\treturn new ArrayPromise<T>(resolve => value, true);\r\n\t}\r\n}\r\n\r\nconst PROMISE_COLLECTION = \"PromiseCollection\";\r\n/**\r\n * A Promise collection exposes useful methods for handling a collection of promises and their results.\r\n */\r\nexport class PromiseCollection<T>\r\n\textends DisposableBase\r\n{\r\n\tprivate _source:PromiseLike<T>[];\r\n\r\n\tconstructor(source:PromiseLike<T>[] | null | undefined)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = PROMISE_COLLECTION;\r\n\t\tthis._source = source && source.slice() || [];\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source.length = 0;\r\n\t\t(<any>this)._source = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a copy of the source promises.\r\n\t * @returns {PromiseLike<PromiseLike<any>>[]}\r\n\t */\r\n\tget promises():PromiseLike<T>[]\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this._source.slice();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, or is rejected with the same rejection reason as the first promise to be rejected.\r\n\t * @returns {PromiseBase<any>}\r\n\t */\r\n\tall():ArrayPromise<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn TSDNPromise.all(this._source);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n\t * or rejected.\r\n\t * @returns {PromiseBase<any>} A new Promise.\r\n\t */\r\n\trace():PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn TSDNPromise.race(this._source);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with array of provided promises when all provided promises have resolved (fulfill or reject).\r\n\t * Unlike .all this method waits for all rejections as well as fulfillment.\r\n\t * @returns {PromiseBase<PromiseLike<any>[]>}\r\n\t */\r\n\twaitAll():ArrayPromise<PromiseLike<T>>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn TSDNPromise.waitAll(this._source);\r\n\t}\r\n\r\n\t/**\r\n\t * Waits for all the values to resolve and then applies a transform.\r\n\t * @param transform\r\n\t * @returns {PromiseBase<Array<any>>}\r\n\t */\r\n\tmap<U>(transform:(value:T) => U):ArrayPromise<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new ArrayPromise<U>(resolve =>\r\n\t\t{\r\n\t\t\tthis.all()\r\n\t\t\t\t.doneNow((result:T[]) => resolve(result.map(transform)));\r\n\t\t}, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Applies a transform to each promise and defers the result.\r\n\t * Unlike map, this doesn't wait for all promises to resolve, ultimately improving the async nature of the request.\r\n\t * @param transform\r\n\t * @returns {PromiseCollection<U>}\r\n\t */\r\n\r\n\tpipe<U>(transform:(value:T) => U | PromiseLike<U>):PromiseCollection<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new PromiseCollection<U>(\r\n\t\t\tthis._source.map(p => handleSyncIfPossible(p, transform))\r\n\t\t);\r\n\t}\r\n\r\n\treduce(\r\n\t\treduction:(previousValue:T, currentValue:T, i?:number, array?:PromiseLike<T>[]) => T,\r\n\t\tinitialValue?:T | PromiseLike<T>):PromiseBase<T>\r\n\r\n\treduce<U>(\r\n\t\treduction:(previousValue:U, currentValue:T, i?:number, array?:PromiseLike<T>[]) => U,\r\n\t\tinitialValue:U | PromiseLike<U>):PromiseBase<U>\r\n\r\n\t/**\r\n\t * Behaves like array reduce.\r\n\t * Creates the promise chain necessary to produce the desired result.\r\n\t * @param reduction\r\n\t * @param initialValue\r\n\t * @returns {PromiseBase<PromiseLike<any>>}\r\n\t */\r\n\treduce<U>(\r\n\t\treduction:(previousValue:U, currentValue:T, i?:number, array?:PromiseLike<T>[]) => U,\r\n\t\tinitialValue?:U | PromiseLike<U>):PromiseBase<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn TSDNPromise.wrap<U>(this._source\r\n\t\t\t.reduce(\r\n\t\t\t\t(\r\n\t\t\t\t\tprevious:PromiseLike<U>,\r\n\t\t\t\t\tcurrent:PromiseLike<T>,\r\n\t\t\t\t\ti:number,\r\n\t\t\t\t\tarray:PromiseLike<T>[]) =>\r\n\t\t\t\t\thandleSyncIfPossible(previous,\r\n\t\t\t\t\t\t(p:U) => handleSyncIfPossible(current, (c:T) => reduction(p, c, i, array))),\r\n\r\n\t\t\t\t\tisPromise(initialValue)\r\n\t\t\t\t\t\t? initialValue\r\n\t\t\t\t\t\t: new Fulfilled(<any>initialValue)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}\r\n\r\nmodule pools\r\n{\r\n\r\n\t// export module pending\r\n\t// {\r\n\t//\r\n\t//\r\n\t// \tvar pool:ObjectPool<Promise<any>>;\r\n\t//\r\n\t// \tfunction getPool()\r\n\t// \t{\r\n\t// \t\treturn pool || (pool = new ObjectPool<Promise<any>>(40, factory, c=>c.dispose()));\r\n\t// \t}\r\n\t//\r\n\t// \tfunction factory():Promise<any>\r\n\t// \t{\r\n\t// \t\treturn new Promise();\r\n\t// \t}\r\n\t//\r\n\t// \texport function get():Promise<any>\r\n\t// \t{\r\n\t// \t\tvar p:any = getPool().take();\r\n\t// \t\tp.__wasDisposed = false;\r\n\t// \t\tp._state = Promise.State.Pending;\r\n\t// \t\treturn p;\r\n\t// \t}\r\n\t//\r\n\t// \texport function recycle<T>(c:Promise<T>):void\r\n\t// \t{\r\n\t// \t\tif(c) getPool().add(c);\r\n\t// \t}\r\n\t//\r\n\t// }\r\n\t//\r\n\t// export function recycle<T>(c:PromiseBase<T>):void\r\n\t// {\r\n\t// \tif(!c) return;\r\n\t// \tif(c instanceof Promise && c.constructor==Promise) pending.recycle(c);\r\n\t// \telse c.dispose();\r\n\t// }\r\n\r\n\r\n\texport module PromiseCallbacks\r\n\t{\r\n\r\n\t\tlet pool:ObjectPool<IPromiseCallbacks<any>>;\r\n\r\n\t\t//noinspection JSUnusedLocalSymbols\r\n\t\tfunction getPool()\r\n\t\t{\r\n\t\t\treturn pool\r\n\t\t\t\t|| (pool = new ObjectPool<IPromiseCallbacks<any>>(40, factory, c =>\r\n\t\t\t\t{\r\n\t\t\t\t\tc.onFulfilled = NULL;\r\n\t\t\t\t\tc.onRejected = NULL;\r\n\t\t\t\t\tc.promise = NULL;\r\n\t\t\t\t}));\r\n\t\t}\r\n\r\n\t\tfunction factory():IPromiseCallbacks<any>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tonFulfilled: NULL,\r\n\t\t\t\tonRejected: NULL,\r\n\t\t\t\tpromise: NULL\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\texport function init<T>(\r\n\t\t\tonFulfilled:TSDNPromise.Fulfill<T, any> | undefined | null,\r\n\t\t\tonRejected?:TSDNPromise.Reject<any> | undefined | null,\r\n\t\t\tpromise?:TSDNPromise<any>):IPromiseCallbacks<T>\r\n\t\t{\r\n\r\n\t\t\tconst c = getPool().take();\r\n\t\t\tc.onFulfilled = onFulfilled || undefined;\r\n\t\t\tc.onRejected = onRejected || undefined;\r\n\t\t\tc.promise = promise;\r\n\t\t\treturn c;\r\n\t\t}\r\n\r\n\t\texport function recycle<T>(c:IPromiseCallbacks<T>):void\r\n\t\t{\r\n\t\t\tgetPool().add(c);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\nexport module TSDNPromise\r\n{\r\n\r\n\t/**\r\n\t * The state of a promise.\r\n\t * https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md\r\n\t * If a promise is disposed the value will be undefined which will also evaluate (promise.state)==false.\r\n\t */\r\n\texport enum State {\r\n\t\tPending = 0,\r\n\t\tFulfilled = 1,\r\n\t\tRejected = -1\r\n\t}\r\n\tObject.freeze(State);\r\n\r\n\texport type Resolution<TResult> = TResult | PromiseLike<TResult>;\r\n\r\n\texport interface Fulfill<T, TResult>\r\n\t{\r\n\t\t(value:T):Resolution<TResult>\r\n\t}\r\n\r\n\texport interface Reject<TResult>\r\n\t{\r\n\t\t(reason:any):TResult | PromiseLike<TResult>;\r\n\t}\r\n\r\n\texport interface Then<T, TResult>\r\n\t{\r\n\t\t(onfulfilled?:Fulfill<T, TResult> | undefined | null, onrejected?:Reject<TResult> | undefined | null):PromiseLike<TResult>;\r\n\t\t(onfulfilled?:Fulfill<T, TResult> | undefined | null, onrejected?:Reject<void> | undefined | null):PromiseLike<TResult>;\r\n\t}\r\n\r\n\texport interface Executor<T>\r\n\t{\r\n\t\t(\r\n\t\t\tresolve:(value?:T | PromiseLike<T>) => void,\r\n\t\t\treject:(reason?:any) => void):void;\r\n\t}\r\n\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\texport interface Factory\r\n\t{\r\n\t\t<T>(executor:Executor<T>):PromiseLike<T>;\r\n\t}\r\n\r\n\texport function factory<T>(e:Executor<T>):TSDNPromise<T>\r\n\t{\r\n\t\treturn new TSDNPromise(e);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes a set of promises and returns a PromiseCollection.\r\n\t * @param promises\r\n\t */\r\n\texport function group<T>(promises:PromiseLike<T>[]):PromiseCollection<T>\r\n\texport function group<T>(\r\n\t\tpromise:PromiseLike<T>,\r\n\t\t...rest:PromiseLike<T>[]):PromiseCollection<T>\r\n\texport function group(\r\n\t\tfirst:PromiseLike<any> | PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseCollection<any>\r\n\t{\r\n\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\treturn new PromiseCollection(\r\n\t\t\t((first) instanceof (Array) ? first : [first])\r\n\t\t\t\t.concat(rest)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, or is rejected with the same rejection reason as the first promise to be rejected.\r\n\t */\r\n\texport function all<T>(promises:PromiseLike<T>[]):ArrayPromise<T>\r\n\texport function all<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):ArrayPromise<T>\r\n\texport function all(\r\n\t\tfirst:PromiseLike<any> | PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):ArrayPromise<any>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tlet promises = ((first) instanceof (Array) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v => !v)) return new ArrayPromise<any>(\r\n\t\t\tr => r(promises), true); // it's a new empty, reuse it. :|\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\treturn new ArrayPromise<any>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tlet result:any[] = [];\r\n\t\t\tlet len = promises.length;\r\n\t\t\tresult.length = len;\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i) => i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = () =>\r\n\t\t\t{\r\n\t\t\t\treject = VOID0;\r\n\t\t\t\tresolve = VOID0;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = VOID0;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = VOID0;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = () =>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(result);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(resolve)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = v;\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onReject = (e?:any) =>\r\n\t\t\t{\r\n\t\t\t\tlet r = reject;\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(e);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v => onFulfill(v, i), onReject);\r\n\t\t\t\telse remaining.remove(i);\r\n\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with array of provided promises when all provided promises have resolved (fulfill or reject).\r\n\t * Unlike .all this method waits for all rejections as well as fulfillment.\r\n\t */\r\n\texport function waitAll<T>(promises:PromiseLike<T>[]):ArrayPromise<PromiseLike<T>>\r\n\texport function waitAll<T>(\r\n\t\tpromise:PromiseLike<T>,\r\n\t\t...rest:PromiseLike<T>[]):ArrayPromise<PromiseLike<T>>\r\n\texport function waitAll(\r\n\t\tfirst:PromiseLike<any> | PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):ArrayPromise<PromiseLike<any>>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tconst promises = ((first) instanceof (Array) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v => !v)) return new ArrayPromise<any>(\r\n\t\t\tr => r(promises), true); // it's a new empty, reuse it. :|\r\n\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\treturn new ArrayPromise<any>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tlet len = promises.length;\r\n\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i) => i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = () =>\r\n\t\t\t{\r\n\t\t\t\treject = NULL;\r\n\t\t\t\tresolve = NULL;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = NULL;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = () =>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(promises);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolved = (i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(remaining)\r\n\t\t\t\t{\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v => onResolved(i), e => onResolved(i));\r\n\t\t\t\telse onResolved(i);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n\t * or rejected.\r\n\t * @param promises An array of Promises.\r\n\t * @returns A new Promise.\r\n\t */\r\n\texport function race<T>(promises:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race(\r\n\t\tfirst:PromiseLike<any> | PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<any>\r\n\t{\r\n\t\tlet promises = first && ((first) instanceof (Array) ? first : [first]).concat(rest); // yay a copy?\r\n\t\tif(!promises || !promises.length || !(promises = promises.filter(v => v!=null)).length)\r\n\t\t\tthrow new ArgumentException(\"Nothing to wait for.\");\r\n\r\n\t\tconst len = promises.length;\r\n\r\n\t\t// Only one?  Nothing to race.\r\n\t\tif(len==1) return wrap(promises[0]);\r\n\r\n\t\t// Look for already resolved promises and the first one wins.\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tconst p:any = promises[i];\r\n\t\t\tif(p instanceof PromiseBase && p.isSettled) return p;\r\n\t\t}\r\n\r\n\t\treturn new TSDNPromise((resolve, reject) =>\r\n\t\t{\r\n\t\t\tlet cleanup = () =>\r\n\t\t\t{\r\n\t\t\t\treject = NULL;\r\n\t\t\t\tresolve = NULL;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = NULL;\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolve = (r:(x:any) => void, v:any) =>\r\n\t\t\t{\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(v);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any) => onResolve(resolve, v);\r\n\t\t\tlet onReject = (e?:any) => onResolve(reject, e);\r\n\r\n\t\t\tfor(let p of promises)\r\n\t\t\t{\r\n\t\t\t\tif(!resolve) break;\r\n\t\t\t\tp.then(onFulfill, onReject);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// // race<T>(values: Iterable<T | PromiseLike<T>>): Promise<T>;\r\n\r\n\t/**\r\n\t * Creates a new resolved promise .\r\n\t * @returns A resolved promise.\r\n\t */\r\n\texport function resolve():PromiseBase<void>\r\n\r\n\t/**\r\n\t * Creates a new resolved promise for the provided value.\r\n\t * @param value A value or promise.\r\n\t * @returns A promise whose internal state matches the provided promise.\r\n\t */\r\n\texport function resolve<T>(value:T | PromiseLike<T>):PromiseBase<T>;\r\n\texport function resolve(value?:any):PromiseBase<any>\r\n\t{\r\n\r\n\t\treturn isPromise(value) ? wrap(value) : new Fulfilled(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Syntactic shortcut for avoiding 'new'.\r\n\t * @param resolver\r\n\t * @param forceSynchronous\r\n\t * @returns {TSDNPromise}\r\n\t */\r\n\texport function using<T>(\r\n\t\tresolver:TSDNPromise.Executor<T>,\r\n\t\tforceSynchronous:boolean = false):PromiseBase<T>\r\n\t{\r\n\t\treturn new TSDNPromise<T>(resolver, forceSynchronous);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes a set of values or promises and returns a PromiseCollection.\r\n\t * Similar to 'group' but calls resolve on each entry.\r\n\t * @param resolutions\r\n\t */\r\n\texport function resolveAll<T>(resolutions:Array<T | PromiseLike<T>>):PromiseCollection<T>;\r\n\texport function resolveAll<T>(\r\n\t\tpromise:T | PromiseLike<T>,\r\n\t\t...rest:Array<T | PromiseLike<T>>):PromiseCollection<T>\r\n\texport function resolveAll(\r\n\t\tfirst:any | PromiseLike<any> | Array<any | PromiseLike<any>>,\r\n\t\t...rest:Array<any | PromiseLike<any>>):PromiseCollection<any>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"resolutions\");\r\n\t\treturn new PromiseCollection(\r\n\t\t\t((first) instanceof (Array) ? first : [first])\r\n\t\t\t\t.concat(rest)\r\n\t\t\t\t.map((v:any) => resolve(v)));\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a PromiseCollection containing promises that will resolve on the next tick using the transform function.\r\n\t * This utility function does not chain promises together to create the result,\r\n\t * it only uses one promise per transform.\r\n\t * @param source\r\n\t * @param transform\r\n\t * @returns {PromiseCollection<T>}\r\n\t */\r\n\texport function map<T, U>(source:T[], transform:(value:T) => U):PromiseCollection<U>\r\n\t{\r\n\t\treturn new PromiseCollection<U>(\r\n\t\t\tsource.map(d => new TSDNPromise<U>((r, j) =>\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tr(transform(d));\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tj(ex);\r\n\t\t\t\t}\r\n\t\t\t}))\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new rejected promise for the provided reason.\r\n\t * @param reason The reason the promise was rejected.\r\n\t * @returns A new rejected Promise.\r\n\t */\r\n\texport function reject<T>(reason:T):PromiseBase<T>\r\n\t{\r\n\t\treturn new Rejected<T>(reason);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes any Promise-Like object and ensures an extended version of it from this module.\r\n\t * @param target The Promise-Like object\r\n\t * @returns A new target that simply extends the target.\r\n\t */\r\n\texport function wrap<T>(target:T | PromiseLike<T>):PromiseBase<T>\r\n\t{\r\n\t\tif(!target) throw new ArgumentNullException(TARGET);\r\n\t\treturn isPromise(target)\r\n\t\t\t? (target instanceof PromiseBase ? target : new PromiseWrapper(target))\r\n\t\t\t: new Fulfilled<T>(target);\r\n\t}\r\n\r\n\t/**\r\n\t * A function that acts like a 'then' method (aka then-able) can be extended by providing a function that takes an onFulfill and onReject.\r\n\t * @param then\r\n\t * @returns {PromiseWrapper<T>}\r\n\t */\r\n\texport function createFrom<T>(then:Then<T, any>):PromiseBase<T>\r\n\t{\r\n\t\tif(!then) throw new ArgumentNullException(THEN);\r\n\t\treturn new PromiseWrapper<T>({then: then});\r\n\t}\r\n\r\n}\r\n\r\n\r\ninterface IPromiseCallbacks<T>\r\n{\r\n\tonFulfilled?:TSDNPromise.Fulfill<T, any>;\r\n\tonRejected?:TSDNPromise.Reject<any>;\r\n\tpromise?:TSDNPromise<any>;\r\n}\r\n\r\nexport {TSDNPromise as Promise};\r\n\r\nexport default TSDNPromise;\r\n\r\n\r\n"]}