{"version":3,"sources":["System/Threading/Tasks/Parallel.ts"],"names":[],"mappings":"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","file":"Parallel.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Originally based upon Parallel.js: https://github.com/adambom/parallel.js/blob/master/lib/parallel.js\r\n */\r\n\r\nimport {ArrayPromise, TSDNPromise, PromiseBase, PromiseCollection} from \"../../Promises/Promise\";\r\nimport {Type} from \"../../Types\";\r\nimport Worker from \"../Worker\";\r\nimport {WorkerLike} from \"../WorkerType\";\r\nimport {deferImmediate} from \"../deferImmediate\";\r\nimport {isNodeJS} from \"../../Environment\";\r\nimport {ObjectPool} from \"../../Disposable/ObjectPool\";\r\nimport {IMap} from \"../../../IMap\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\ndeclare const navigator:any;\r\ndeclare const __dirname:string;\r\n\r\n//noinspection JSUnusedAssignment\r\nconst\r\n\tMAX_WORKERS:number = 16,\r\n\tVOID0:undefined    = void 0,\r\n\tURL                = typeof self!==Type.UNDEFINED\r\n\t\t? (self.URL ? self.URL : (<any>self).webkitURL)\r\n\t\t: null,\r\n\t_supports          = isNodeJS || !!(<any>self).Worker; // node always supports parallel\r\n\r\nexport interface ParallelOptions\r\n{\r\n\t/**\r\n\t * This is the path to the file eval.js.  This is required when running in node, and required for some browsers (IE 10) in order to work around cross-domain restrictions for web workers.  Defaults to the same location as parallel.js in node environments, and null in the browser.\r\n\t **/\r\n\tevalPath?:string;\r\n\r\n\t/**\r\n\t * The maximum number of permitted worker threads.  This will default to 4, or the number of CPUs on your computer if you're running node.\r\n\t **/\r\n\tmaxConcurrency?:number;\r\n\r\n\t/**\r\n\t * If WebWorkers are not available, whether or not to fall back to synchronous processing using setTimeout.  Defaults to true.\r\n\t **/\r\n\tallowSynchronous?:boolean;\r\n\r\n\tenv?:any\r\n\tenvNamespace?:string\r\n}\r\n\r\n//noinspection JSUnusedAssignment\r\nconst defaults:ParallelOptions = {\r\n\tevalPath: isNodeJS ? __dirname + '/eval.js' : VOID0,\r\n\tmaxConcurrency: isNodeJS\r\n\t\t? (<any>require)('os').cpus().length\r\n\t\t: (navigator.hardwareConcurrency || 4),\r\n\tallowSynchronous: true,\r\n\tenv: {},\r\n\tenvNamespace: 'env'\r\n};\r\n\r\nfunction extend<TFrom extends any,TTo extends any>(from:TFrom, to:TTo):TFrom & TTo\r\n{\r\n\tif(!to) to = <any>{};\r\n\tfor(let i of Object.keys(from))\r\n\t{\r\n\t\tif(to[i]===VOID0) to[i] = from[i];\r\n\t}\r\n\treturn <any>to;\r\n}\r\n\r\nfunction interact(\r\n\tw:WorkerLike,\r\n\tonMessage:(msg:{data:any})=>void,\r\n\tonError:(e:any)=>void,\r\n\tmessage?:any):void\r\n{\r\n\tif(onMessage) w.onmessage = onMessage;\r\n\tif(onError) w.onerror = onError;\r\n\tif(message!==VOID0) w.postMessage(message);\r\n}\r\n\r\nclass WorkerPromise<T> extends TSDNPromise<T>\r\n{\r\n\tconstructor(worker:WorkerLike, data:any)\r\n\t{\r\n\t\tsuper((resolve, reject) =>\r\n\t\t{\r\n\t\t\tinteract(\r\n\t\t\t\tworker,\r\n\t\t\t\t(response:{data:any}) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tresolve(response.data);\r\n\t\t\t\t},\r\n\t\t\t\t(e:any) =>\r\n\t\t\t\t{\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t},\r\n\t\t\t\tdata)\r\n\t\t}, true);\r\n\t}\r\n}\r\n\r\nexport type RequireType = string | Function | {name?:string,fn:Function};\r\n\r\nmodule workers\r\n{\r\n\r\n\t/*\r\n\t * Note:\r\n\t * Currently there is nothing preventing excessive numbers of workers from being generated.\r\n\t * Eventually there will be a master pool count which will regulate these workers.\r\n\t */\r\n\r\n\tfunction getPool(key:string):ObjectPool<WorkerLike>\r\n\t{\r\n\t\tlet pool = workerPools[key];\r\n\t\tif(!pool)\r\n\t\t{\r\n\t\t\tworkerPools[key] = pool = new ObjectPool<WorkerLike>(8);\r\n\t\t\tpool.autoClearTimeout = 3000; // Fast cleanup... 1s.\r\n\t\t}\r\n\t\treturn pool;\r\n\t}\r\n\r\n\tconst workerPools:IMap<ObjectPool<WorkerLike>> = {};\r\n\r\n\texport function recycle(w:WorkerLike|null|undefined):null\r\n\t{ // always returns null.\r\n\t\tif(w)\r\n\t\t{\r\n\t\t\tw.onerror = <any>null;\r\n\t\t\tw.onmessage = <any>null;\r\n\t\t\tconst k = (<any>w).__key;\r\n\t\t\tif(k)\r\n\t\t\t{\r\n\t\t\t\tgetPool(k).add(w);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tdeferImmediate(() => w.terminate());\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\texport function tryGet(key:string):WorkerLike|undefined\r\n\t{\r\n\t\treturn getPool(key).tryTake();\r\n\t}\r\n\r\n\texport function getNew(key:string, url:string):WorkerLike\r\n\t{\r\n\t\tconst worker:any = new Worker(url);\r\n\t\tworker.__key = key;\r\n\t\tif(!worker.dispose)\r\n\t\t{\r\n\t\t\tworker.dispose = () =>\r\n\t\t\t{\r\n\t\t\t\tworker.onmessage = null;\r\n\t\t\t\tworker.onerror = null;\r\n\t\t\t\tworker.dispose = null;\r\n\t\t\t\tworker.terminate();\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn worker;\r\n\t}\r\n}\r\n\r\n\r\nexport class Parallel\r\n{\r\n\r\n\toptions:ParallelOptions;\r\n\t_requiredScripts:string[];\r\n\t_requiredFunctions:{name?:string,fn:Function}[];\r\n\r\n\tconstructor(options?:ParallelOptions)\r\n\t{\r\n\t\tthis.options = extend(defaults, options);\r\n\t\tthis._requiredScripts = [];\r\n\t\tthis._requiredFunctions = [];\r\n\r\n\t\tthis.ensureClampedMaxConcurrency();\r\n\t}\r\n\r\n\tstatic maxConcurrency(max:number):Parallel\r\n\t{\r\n\t\treturn new Parallel({maxConcurrency: max});\r\n\t}\r\n\r\n\tprotected _getWorkerSource(task:Function|string, env?:any):string\r\n\t{\r\n\t\tconst scripts = this._requiredScripts, functions = this._requiredFunctions;\r\n\t\tlet preStr = '';\r\n\r\n\t\tif(!isNodeJS && scripts.length)\r\n\t\t{\r\n\t\t\tpreStr += 'importScripts(\"' + scripts.join('\",\"') + '\");\\r\\n';\r\n\t\t}\r\n\r\n\t\tfor(let {name, fn} of functions)\r\n\t\t{\r\n\t\t\tconst source = fn.toString();\r\n\t\t\tpreStr += name\r\n\t\t\t\t? `var ${name} = ${source};`\r\n\t\t\t\t: source;\r\n\t\t}\r\n\r\n\r\n\t\tenv = JSON.stringify(env || {});\r\n\r\n\t\tconst ns = this.options.envNamespace;\r\n\r\n\t\treturn preStr + (\r\n\t\t\t\tisNodeJS\r\n\t\t\t\t\t? `process.on(\"message\", function(e) {global.${ns} = ${env};process.send(JSON.stringify((${task.toString()})(JSON.parse(e).data)))})`\r\n\t\t\t\t\t: `self.onmessage = function(e) {var global = {}; global.${ns} = ${env};self.postMessage((${task.toString()})(e.data))}`\r\n\t\t\t);\r\n\t}\r\n\r\n\trequire(...required:RequireType[]):this\r\n\t{\r\n\t\treturn this.requireThese(required);\r\n\t}\r\n\r\n\trequireThese(required:RequireType[]):this\r\n\t{\r\n\t\tfor(let a of required)\r\n\t\t{\r\n\t\t\tswitch(typeof a)\r\n\t\t\t{\r\n\t\t\t\tcase Type.STRING:\r\n\t\t\t\t\tthis._requiredScripts.push(<string>a);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Type.FUNCTION:\r\n\t\t\t\t\tthis._requiredFunctions.push({fn: <Function>a});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Type.OBJECT:\r\n\t\t\t\t\tthis._requiredFunctions.push(<{name?:string,fn:Function}>a);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new TypeError(\"Invalid type.\");\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\tprotected _spawnWorker(task:Function|string, env?:any):WorkerLike|undefined\r\n\t{\r\n\t\tconst src = this._getWorkerSource(task, env);\r\n\r\n\t\tif(Worker===VOID0) return VOID0;\r\n\t\tlet worker = workers.tryGet(src);\r\n\t\tif(worker) return worker;\r\n\r\n\t\tconst scripts = this._requiredScripts;\r\n\t\tlet evalPath = this.options.evalPath;\r\n\r\n\t\tif(!evalPath)\r\n\t\t{\r\n\t\t\tif(isNodeJS)\r\n\t\t\t\tthrow new Error(\"Can't use NodeJS without eval.js!\");\r\n\t\t\tif(scripts.length)\r\n\t\t\t\tthrow new Error(\"Can't use required scripts without eval.js!\");\r\n\t\t\tif(!URL)\r\n\t\t\t\tthrow new Error(\"Can't create a blob URL in this browser!\");\r\n\t\t}\r\n\r\n\t\tif(isNodeJS || scripts.length || !URL)\r\n\t\t{\r\n\t\t\tworker = workers.getNew(src, <string>evalPath);\r\n\t\t\tworker.postMessage(src);\r\n\t\t}\r\n\t\telse if(URL)\r\n\t\t{\r\n\t\t\tconst blob = new Blob([src], {type: 'text/javascript'});\r\n\t\t\tconst url = URL.createObjectURL(blob);\r\n\r\n\t\t\tworker = workers.getNew(src, url);\r\n\t\t}\r\n\r\n\t\treturn worker;\r\n\t}\r\n\r\n\t/**\r\n\t * Schedules the task to be run in the worker pool.\r\n\t * @param data\r\n\t * @param task\r\n\t * @param env\r\n\t * @returns {TSDNPromise<U>|TSDNPromise}\r\n\t */\r\n\tstartNew<T,U>(data:T, task:(data:T) => U, env?:any):TSDNPromise<U>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst maxConcurrency = this.ensureClampedMaxConcurrency();\r\n\r\n\t\tconst worker = maxConcurrency ? _._spawnWorker(task, extend(_.options.env, env || {})) : null;\r\n\t\tif(worker)\r\n\t\t{\r\n\t\t\treturn new WorkerPromise<U>(worker, data)\r\n\t\t\t\t.finallyThis(() => workers.recycle(worker));\r\n\t\t}\r\n\r\n\t\tif(_.options.allowSynchronous)\r\n\t\t\treturn this.startLocal(data, task);\r\n\r\n\t\tthrow new Error(maxConcurrency\r\n\t\t\t?\"Workers do not exist and synchronous operation not allowed!\"\r\n\t\t\t:\"'maxConcurrency' set to 0 but 'allowSynchronous' is false.\");\r\n\t}\r\n\r\n\t/**\r\n\t * Runs the task within the local thread/process.\r\n\t * Is good for use with testing.\r\n\t * @param data\r\n\t * @param task\r\n\t * @returns {TSDNPromise<U>|TSDNPromise}\r\n\t */\r\n\tstartLocal<T,U>(data:T, task:(data:T) => U):TSDNPromise<U>\r\n\t{\r\n\t\treturn new TSDNPromise<U>(\r\n\t\t\t(resolve, reject) =>\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tresolve(task(data));\r\n\t\t\t\t}\r\n\t\t\t\tcatch(e)\r\n\t\t\t\t{\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an array of promises that each resolve after their task completes.\r\n\t * Provides a potential performance benefit by not waiting for all promises to resolve before proceeding to next step.\r\n\t * @param data\r\n\t * @param task\r\n\t * @param env\r\n\t * @returns {PromiseCollection}\r\n\t */\r\n\tpipe<T,U>(data:T[], task:(data:T) => U, env?:any):PromiseCollection<U>\r\n\t{\r\n\r\n\t\t// The resultant promise collection will make an internal copy...\r\n\t\tlet result:TSDNPromise<U>[]|undefined;\r\n\r\n\t\tif(data && data.length)\r\n\t\t{\r\n\t\t\tconst len = data.length;\r\n\t\t\tconst taskString = task.toString();\r\n\t\t\tconst maxConcurrency = this.ensureClampedMaxConcurrency();\r\n\t\t\tlet error:any;\r\n\t\t\tlet i = 0;\r\n\t\t\tfor(let w = 0; !error && i<Math.min(len, maxConcurrency); w++)\r\n\t\t\t{\r\n\t\t\t\tlet worker:WorkerLike|null|undefined = maxConcurrency ? this._spawnWorker(taskString, env) : null;\r\n\r\n\t\t\t\tif(!worker)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!this.options.allowSynchronous)\r\n\t\t\t\t\t\tthrow new Error(maxConcurrency\r\n\t\t\t\t\t\t\t?\"Workers do not exist and synchronous operation not allowed!\"\r\n\t\t\t\t\t\t\t:\"'maxConcurrency' set to 0 but 'allowSynchronous' is false.\");\r\n\r\n\t\t\t\t\t// Concurrency doesn't matter in a single thread... Just queue it all up.\r\n\t\t\t\t\treturn TSDNPromise.map(data, task);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(!result)\r\n\t\t\t\t{\r\n\t\t\t\t\t// There is a small risk that the consumer could call .resolve() which would result in a double resolution.\r\n\t\t\t\t\t// But it's important to minimize the number of objects created.\r\n\t\t\t\t\tresult = data.map(d => new TSDNPromise<U>());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet next = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(error)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(worker)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(i<len)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//noinspection JSReferencingMutableVariableFromClosure\r\n\t\t\t\t\t\t\tlet ii = i++, p = result![ii];\r\n\t\t\t\t\t\t\tlet wp = new WorkerPromise<U>(worker, data[ii]);\r\n\t\t\t\t\t\t\t//noinspection JSIgnoredPromiseFromCall\r\n\t\t\t\t\t\t\twp.thenSynchronous(\r\n\t\t\t\t\t\t\t\tr =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t//noinspection JSIgnoredPromiseFromCall\r\n\t\t\t\t\t\t\t\t\tp.resolve(r);\r\n\t\t\t\t\t\t\t\t\tnext();\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\te =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(!error)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\terror = e;\r\n\t\t\t\t\t\t\t\t\t\t//noinspection JSIgnoredPromiseFromCall\r\n\t\t\t\t\t\t\t\t\t\tp.reject(e);\r\n\t\t\t\t\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.finallyThis(() =>\r\n\t\t\t\t\t\t\t\t\twp.dispose());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tnext();\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn new PromiseCollection<U>(result);\r\n\t}\r\n\r\n\tprivate ensureClampedMaxConcurrency():number\r\n\t{\r\n\t\tlet {maxConcurrency} = this.options;\r\n\t\tif(maxConcurrency && maxConcurrency>MAX_WORKERS)\r\n\t\t{\r\n\t\t\tthis.options.maxConcurrency = maxConcurrency = MAX_WORKERS;\r\n\t\t\tconsole.warn(`More than ${MAX_WORKERS} workers can reach worker limits and cause unexpected results.  maxConcurrency reduced to ${MAX_WORKERS}.`);\r\n\t\t}\r\n\t\treturn (maxConcurrency || maxConcurrency===0) ? maxConcurrency : MAX_WORKERS;\r\n\t}\r\n\r\n\t/**\r\n\t * Waits for all tasks to resolve and returns a promise with the results.\r\n\t * @param data\r\n\t * @param task\r\n\t * @param env\r\n\t * @returns {ArrayPromise}\r\n\t */\r\n\tmap<T,U>(data:T[], task:(data:T) => U, env?:any):ArrayPromise<U>\r\n\t{\r\n\t\tif(!data || !data.length)\r\n\t\t\treturn ArrayPromise.fulfilled(data && []);\r\n\r\n\t\t// Would return the same result, but has extra overhead.\r\n\t\t// return this.pipe(data,task).all();\r\n\r\n\t\tdata = data.slice(); // Never use the original.\r\n\t\treturn new ArrayPromise<U>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tconst result:U[] = [], len = data.length;\r\n\t\t\tresult.length = len;\r\n\r\n\t\t\tconst taskString = task.toString();\r\n\t\t\tlet maxConcurrency = this.ensureClampedMaxConcurrency(), error:any;\r\n\t\t\tlet i = 0, resolved = 0;\r\n\t\t\tfor(let w = 0; !error && i<Math.min(len, maxConcurrency); w++)\r\n\t\t\t{\r\n\t\t\t\tlet worker:WorkerLike|null|undefined = this._spawnWorker(taskString, env);\r\n\r\n\t\t\t\tif(!worker)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!this.options.allowSynchronous)\r\n\t\t\t\t\t\tthrow new Error('Workers do not exist and synchronous operation not allowed!');\r\n\r\n\t\t\t\t\t// Concurrency doesn't matter in a single thread... Just queue it all up.\r\n\t\t\t\t\tresolve(TSDNPromise.map(data, task).all());\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet next = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(error)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(worker)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(i<len)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet ii = i++;\r\n\t\t\t\t\t\t\tlet wp = new WorkerPromise<U>(worker, data[ii]);\r\n\t\t\t\t\t\t\t//noinspection JSIgnoredPromiseFromCall\r\n\t\t\t\t\t\t\twp.thenSynchronous(\r\n\t\t\t\t\t\t\t\tr =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tresult[ii] = <any>r;\r\n\t\t\t\t\t\t\t\t\tnext();\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\te =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(!error)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\terror = e;\r\n\t\t\t\t\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.thenThis(() =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tresolved++;\r\n\t\t\t\t\t\t\t\t\tif(resolved>len) throw Error(\"Resolved count exceeds data length.\");\r\n\t\t\t\t\t\t\t\t\tif(resolved===len) resolve(result);\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.finallyThis(() =>\r\n\t\t\t\t\t\t\t\t\twp.dispose());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tnext();\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tstatic get isSupported() { return _supports; }\r\n\r\n\tstatic options(options?:ParallelOptions):Parallel\r\n\t{\r\n\t\treturn new Parallel(options);\r\n\t}\r\n\r\n\tstatic require(...required:RequireType[]):Parallel\r\n\t{\r\n\t\treturn (new Parallel()).requireThese(required)\r\n\t}\r\n\r\n\tstatic requireThese(required:RequireType[]):Parallel\r\n\t{\r\n\t\treturn (new Parallel()).requireThese(required)\r\n\t}\r\n\r\n\tstatic startNew<T,U>(data:T, task:(data:T) => U, env?:any):PromiseBase<U>\r\n\t{\r\n\t\treturn (new Parallel()).startNew(data, task, env);\r\n\t}\r\n\r\n\t//\r\n\t// forEach<T>(data:T[], task:(data:T) => void, env?:any):PromiseBase<void>\r\n\t// {}\r\n\r\n\tstatic map<T,U>(data:T[], task:(data:T) => U, env?:any):ArrayPromise<U>\r\n\t{\r\n\t\treturn (new Parallel()).map(data, task, env);\r\n\t}\r\n}\r\n\r\n//\r\n//\r\n// \tprivate _spawnReduceWorker<N>(\r\n// \t\tdata:any,\r\n// \t\tcb:(data:N) => N,\r\n// \t\tdone:(err?:any, wrk?:WorkerLike)=>void,\r\n// \t\tenv?:any,\r\n// \t\twrk?:WorkerLike)\r\n// \t{\r\n// \t\tconst _ = this;\r\n// \t\tif(!wrk) wrk = _._spawnWorker(cb, env);\r\n//\r\n// \t\tif(wrk!==VOID0)\r\n// \t\t{\r\n// \t\t\tinteract(wrk,\r\n// \t\t\t\tmsg=>\r\n// \t\t\t\t{\r\n// \t\t\t\t\t_.data[_.data.length] = msg.data;\r\n// \t\t\t\t\tdone(null, wrk);\r\n// \t\t\t\t},\r\n// \t\t\t\te=>\r\n// \t\t\t\t{\r\n// \t\t\t\t\twrk.terminate();\r\n// \t\t\t\t\tdone(e, null);\r\n// \t\t\t\t},\r\n// \t\t\t\tdata);\r\n// \t\t}\r\n// \t\telse if(_.options.allowSynchronous)\r\n// \t\t{\r\n// \t\t\tdeferImmediate(()=>\r\n// \t\t\t{\r\n// \t\t\t\t_.data[_.data.length] = cb(data);\r\n// \t\t\t\tdone();\r\n// \t\t\t});\r\n// \t\t}\r\n// \t\telse\r\n// \t\t{\r\n// \t\t\tthrow new Error('Workers do not exist and synchronous operation not allowed!');\r\n// \t\t}\r\n// \t}\r\n//\r\n//\r\n//\r\n//\r\n// \treduce<N>(cb:(data:N[]) => N, env?:any):Parallel<T>\r\n// \t{\r\n// \t\tenv = extend(this.options.env, env || {});\r\n//\r\n// \t\tvar runningWorkers = 0;\r\n// \t\tconst _ = this;\r\n//\r\n//\r\n// \t\t_._operation = new Promise<any>((resolve, reject)=>\r\n// \t\t{\r\n//\r\n// \t\t\tconst done = (err?:any, wrk?:WorkerLike)=>\r\n// \t\t\t{\r\n// \t\t\t\t--runningWorkers;\r\n// \t\t\t\tif(err)\r\n// \t\t\t\t{\r\n// \t\t\t\t\treject(err);\r\n// \t\t\t\t}\r\n// \t\t\t\telse if(_.data.length===1 && runningWorkers===0)\r\n// \t\t\t\t{\r\n// \t\t\t\t\tresolve(_.data = _.data[0]);\r\n// \t\t\t\t\tif(wrk) wrk.terminate();\r\n// \t\t\t\t}\r\n// \t\t\t\telse if(_.data.length>1)\r\n// \t\t\t\t{\r\n// \t\t\t\t\t++runningWorkers;\r\n// \t\t\t\t\t_._spawnReduceWorker([_.data[0], _.data[1]], cb, done, env, wrk);\r\n// \t\t\t\t\t_.data.splice(0, 2);\r\n// \t\t\t\t}\r\n// \t\t\t\telse\r\n// \t\t\t\t{\r\n// \t\t\t\t\tif(wrk) wrk.terminate();\r\n// \t\t\t\t}\r\n// \t\t\t};\r\n//\r\n// \t\t\tif(_.data.length===1)\r\n// \t\t\t{\r\n// \t\t\t\tresolve(_.data[0]);\r\n// \t\t\t}\r\n// \t\t\telse\r\n// \t\t\t{\r\n// \t\t\t\tfor(var i = 0; i<_.options.maxConcurrency && i<Math.floor(_.data.length/2); ++i)\r\n// \t\t\t\t{\r\n// \t\t\t\t\t++runningWorkers;\r\n// \t\t\t\t\t_._spawnReduceWorker([_.data[i*2], _.data[i*2 + 1]], cb, done, env);\r\n// \t\t\t\t}\r\n//\r\n// \t\t\t\t_.data.splice(0, i*2);\r\n// \t\t\t}\r\n// \t\t}, true);\r\n// \t\treturn this;\r\n//\r\n// \t}\r\n\r\n\r\nexport default Parallel;\r\n"]}